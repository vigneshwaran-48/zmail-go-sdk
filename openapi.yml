openapi: 3.0.3
info:
  title: Zoho Mail API
  description: >-
    This is a Zoho Mail API OpenAPI 3.0 specification

  contact:
    email: vigneshwaran4817@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about the Zoho Mail REST API
  url: https://www.zoho.com/mail/help/api/overview.html
servers:
  - url: https://mail.zoho.com/api
tags:
  - name: accounts
    description: The User Mail Account APIs help you to get and update information about the mail accounts and the related configurations and settings of the users in the organization. The following are part of Mail Accounts API
    externalDocs:
      description: Find out more
      url: https://www.zoho.com/mail/help/api/account-api.html
  - name: folders
    description: The Folder APIs help you to get and update information about the Folder details of a particular user account.
    externalDocs:
      description: Find out more
      url: https://www.zoho.com/mail/help/api/folders-api.html
  - name: labels
    description: The Label APIs help you to get and update information about the label details of a particular user account.
    externalDocs:
      description: Find out more
      url: https://www.zoho.com/mail/help/api/labels-api.html
paths:
  /accounts:
    get:
      tags:
        - accounts
      summary: Get all accounts
      description: This API is used to retrieve all the accounts details of the authenticated user.
      operationId: getmailaccounts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
      security:
        - zohomail_auth:
            - ZohoMail.accounts.ALL
            - ZohoMail.accounts.READ
  /accounts/{accountId}:
    get:
      tags:
        - accounts
      summary: Get Specific Account Details
      description: Retrieve details of a specific Zoho Mail account.
      operationId: getAccountDetails
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the account.
          required: true
          schema:
            type: string
      security:
        - zohomail_auth:
            - ZohoMail.accounts.ALL
            - ZohoMail.accounts.READ
      responses:
        "200":
          description: Successful response with account details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
                
  /accounts/{accountId}/folders:
    post:
      tags:
        - folders
      summary: Create a New Folder
      description: Adds a new folder to a specific account.
      operationId: createFolder
      parameters:
        - name: accountId
          in: path
          required: true
          description: The ID of the account where the folder will be created.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - folderName
              properties:
                folderName:
                  type: string
                  description: The name of the folder to be created.
                  example: "newFolder"
                parentFolderId:
                  type: string
                  description: The ID of the parent folder under which the new folder is created.
                  example: "2560636000000076001"
                parentFolderPath:
                  type: string
                  description: The path of the parent folder under which the new folder is created.
                  example: "/Inbox"
      responses:
        "201":
          description: Folder successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
    get:
      tags:
        - folders
      summary: Get all folders of the account
      description: This API is used to list all the folders within the specified account.
      operationId: getAllFolders
      parameters:
        - name: accountId
          in: path
          required: true
          description: The ID of the account where the folder will be listed.
          schema:
            type: string
      responses:
        "200":
          description: Fetched all folders successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoldersResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
          
  /accounts/{accountId}/folders/{folderId}:
    get:
      tags:
          - folders
      summary: Get a specific folder of the account
      description: This API is used to retrieve a specific folder in a specific account, using the account ID and the folder ID.
      operationId: getFolder
      parameters:
        - name: accountId
          in: path
          required: true
          description: The ID of the account where the folder will be listed.
          schema:
            type: string
        - name: folderId
          in: path
          required: true
          description: This key is used to identify the folder to be fetched.
          schema:
            type: string
      responses:
        "200":
          description: Fetched folder successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
    put:
      tags:
        - folders
      summary: Update a folder
      description: This API serves the purpose of updating folders with various modes.
      operationId: updateFolder
      parameters:
        - name: accountId
          in: path
          required: true
          description: This key is used to identify the account from which the folders have to be fetched. It is generated during account addition.
          schema:
            type: string
        - name: folderId
          in: path
          required: true
          description: This key is used to identify the folder to be fetched.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FolderUpdatePayload"
              
      responses:
        "200":
          description: Updated folder successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoDataResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
    delete:
      tags:
        - folders
      summary: Delete a folder
      description: This API is used to delete a specific folder in a specific account, using the account ID and the folder ID.
      operationId: deleteFolder
      parameters:
        - name: accountId
          in: path
          required: true
          description: This key is used to identify the account from which the folders have to be fetched. It is generated during account addition.
          schema:
            type: string
        - name: folderId
          in: path
          required: true
          description: This key is used to identify the folder to be fetched.
          schema:
            type: string
      responses:
        "200":
          description: Deleted folder successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoDataResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
      
                
components:
  schemas:
    NoDataResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
          
    AccountsResponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/Status"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Account"
            
    AccountResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          $ref: '#/components/schemas/Account'
          
    FolderResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          $ref: '#/components/schemas/Folder'
    
    FoldersResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Folder'

    Status:
      type: object
      properties:
        code:
          type: integer
          example: 200
        description:
          type: string
          example: "success"

    Account:
      type: object
      properties:
        accountId:
          type: string
          example: "2560636000000008002"
        accountDisplayName:
          type: string
          example: "Rebecca"
        incomingUserName:
          type: string
          example: "rebecca@zylker.com"
        accountName:
          type: string
          example: "bizdemo"
        type:
          type: string
          example: "ZOHO_ACCOUNT"
        mailboxStatus:
          type: string
          example: "enabled"
        imapAccessEnabled:
          type: boolean
        popAccessEnabled:
          type: boolean
        smtpStatus:
          type: boolean
        mailForward:
          type: array
          items:
            $ref: "#/components/schemas/MailForward"
        emailAddress:
          type: array
          items:
            $ref: "#/components/schemas/EmailAddress"
        vacationResponse:
          type: array
          items:
            $ref: "#/components/schemas/VacationResponse"
        sendMailDetails:
          type: array
          items:
            $ref: "#/components/schemas/SendMailDetails"
        address:
          $ref: "#/components/schemas/Address"
        URI:
          type: string
          format: uri
          example: "https://mail.zoho.com/api/accounts/2560636000000008002"

    MailForward:
      type: object
      properties:
        mailForwardTo:
          type: string
        type:
          type: string
        status:
          type: string

    EmailAddress:
      type: object
      properties:
        isAlias:
          type: boolean
        isPrimary:
          type: boolean
        mailId:
          type: string
        isConfirmed:
          type: boolean

    VacationResponse:
      type: object
      properties:
        subject:
          type: string
        fromDate:
          type: string
          format: date
        toDate:
          type: string
          format: date
        content:
          type: string
        accountId:
          type: string
        vacationId:
          type: string

    SendMailDetails:
      type: object
      properties:
        sendMailId:
          type: string
        displayName:
          type: string
        serverName:
          type: string
        serverPort:
          type: integer
        userName:
          type: string
        connectionType:
          type: string
        fromAddress:
          type: string
        status:
          type: boolean

    Address:
      type: object
      properties:
        country:
          type: string
        streetAddr:
          type: string
        city:
          type: string
        postalCode:
          type: string
        state:
          type: string
      
    Folder:
      type: object
      properties:
        path:
          type: string
          example: "/new"
        previousFolderId:
          type: string
          example: "2560636000000076001"
        isArchived:
          type: integer
          example: 0
        folderName:
          type: string
          example: "new"
        imapAccess:
          type: boolean
          example: true
        folderType:
          type: string
          example: "Inbox"
        URI:
          type: string
          example: "https://mail.zoho.com/api/accounts/N****C0CM/folders/2560636000000076007"
        folderId:
          type: string
          example: "2560636000000076007"
          
    FolderUpdateMode:
      type: string
      enum:
        - move
        - rename
        - setViewableInIMAP
        - removeViewableInIMAP
        - markAsRead
        - emptyFolder
        
    FolderUpdatePayload:
      type: object
      required:
        - mode
      properties:
        mode:
          $ref: '#/components/schemas/FolderUpdateMode'
        parentFolderId:
          type: string
          description: This parameter refers to the folder ID of the destination parent folder where the folder should be moved.
          example: "2560636000000076001"
        previousFolderId:
          type: string
          description: This parameter refers to the folder ID of a specific folder under the destination parent folder. This determines the exact position where the folder should be placed.
          example: "2560636000000076001"
        folderName:
          type: string
          description: This parameter refers to the new name of the folder.

  securitySchemes:
    zohomail_auth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.zoho.com/oauth/v2/auth
          tokenUrl: https://accounts.zoho.com/oauth/v2/token
          scopes:
            ZohoMail.accounts.ALL: Full access to accounts.
            ZohoMail.accounts.READ: READ access to accounts.
            ZohoMail.folders.ALL: Full access to folders.
            ZohoMail.folders.CREATE: Create a folder.
  
