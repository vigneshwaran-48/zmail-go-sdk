openapi: 3.0.3
info:
  title: Zoho Mail API
  description: >-
    This is a Zoho Mail API OpenAPI 3.0 specification

  contact:
    email: vigneshwaran4817@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about the Zoho Mail REST API
  url: https://www.zoho.com/mail/help/api/overview.html
servers:
  - url: https://mail.zoho.com
  - url: https://mail.zoho.in
  - url: https://mail.zoho.eu
  - url: https://mail.zoho.jp
  - url: https://mail.zohocloud.ca
tags:
  - name: accounts
    description: The User Mail Account APIs help you to get and update information about the mail accounts and the related configurations and settings of the users in the organization. The following are part of Mail Accounts API
    externalDocs:
      description: Find out more
      url: https://www.zoho.com/mail/help/api/account-api.html
  - name: folders
    description: The Folder APIs help you to get and update information about the Folder details of a particular user account.
    externalDocs:
      description: Find out more
      url: https://www.zoho.com/mail/help/api/folders-api.html
  - name: labels
    description: The Label APIs help you to get and update information about the label details of a particular user account.
    externalDocs:
      description: Find out more
      url: https://www.zoho.com/mail/help/api/labels-api.html
  - name: email
    description: The Message APIs help you to retrieve messages from the user account and access them.
    externalDocs:
      description: Find out more
      url: https://www.zoho.com/mail/help/api/email-api.html
paths:
  /api/accounts:
    get:
      tags:
        - accounts
      summary: Get all accounts
      description: This API is used to retrieve all the accounts details of the authenticated user.
      operationId: getmailaccounts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
      security:
        - zohomail_auth:
            - ZohoMail.accounts.ALL
            - ZohoMail.accounts.READ
  /api/accounts/{accountId}:
    get:
      tags:
        - accounts
      summary: Get Specific Account Details
      description: Retrieve details of a specific Zoho Mail account.
      operationId: getAccountDetails
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the account.
          required: true
          schema:
            type: string
      security:
        - zohomail_auth:
            - ZohoMail.accounts.ALL
            - ZohoMail.accounts.READ
      responses:
        "200":
          description: Successful response with account details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
                
  /api/accounts/{accountId}/folders:
    post:
      tags:
        - folders
      summary: Create a New Folder
      description: Adds a new folder to a specific account.
      operationId: createFolder
      parameters:
        - name: accountId
          in: path
          required: true
          description: The ID of the account where the folder will be created.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - folderName
              properties:
                folderName:
                  type: string
                  description: The name of the folder to be created.
                  example: "newFolder"
                parentFolderId:
                  type: string
                  description: The ID of the parent folder under which the new folder is created.
                  example: "2560636000000076001"
                parentFolderPath:
                  type: string
                  description: The path of the parent folder under which the new folder is created.
                  example: "/Inbox"
      responses:
        "201":
          description: Folder successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
    get:
      tags:
        - folders
      summary: Get all folders of the account
      description: This API is used to list all the folders within the specified account.
      operationId: getAllFolders
      parameters:
        - name: accountId
          in: path
          required: true
          description: The ID of the account where the folder will be listed.
          schema:
            type: string
      responses:
        "200":
          description: Fetched all folders successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoldersResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
          
  /api/accounts/{accountId}/folders/{folderId}:
    get:
      tags:
          - folders
      summary: Get a specific folder of the account
      description: This API is used to retrieve a specific folder in a specific account, using the account ID and the folder ID.
      operationId: getFolder
      parameters:
        - name: accountId
          in: path
          required: true
          description: The ID of the account where the folder will be listed.
          schema:
            type: string
        - name: folderId
          in: path
          required: true
          description: This key is used to identify the folder to be fetched.
          schema:
            type: string
      responses:
        "200":
          description: Fetched folder successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
    put:
      tags:
        - folders
      summary: Update a folder
      description: This API serves the purpose of updating folders with various modes.
      operationId: updateFolder
      parameters:
        - name: accountId
          in: path
          required: true
          description: This key is used to identify the account from which the folders have to be fetched. It is generated during account addition.
          schema:
            type: string
        - name: folderId
          in: path
          required: true
          description: This key is used to identify the folder to be fetched.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FolderUpdatePayload"
              
      responses:
        "200":
          description: Updated folder successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoDataResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
    delete:
      tags:
        - folders
      summary: Delete a folder
      description: This API is used to delete a specific folder in a specific account, using the account ID and the folder ID.
      operationId: deleteFolder
      parameters:
        - name: accountId
          in: path
          required: true
          description: This key is used to identify the account from which the folders have to be fetched. It is generated during account addition.
          schema:
            type: string
        - name: folderId
          in: path
          required: true
          description: This key is used to identify the folder to be fetched.
          schema:
            type: string
      responses:
        "200":
          description: Deleted folder successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoDataResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
  /api/accounts/{accountId}/messages/view:
    get:
      tags:
        - email
      summary: Retrieves emails
      description: The API retrieves a list of all the emails in a specific folder or a list of emails based on predefined conditions like status/flags/labels, and more. 
      operationId: listEmails
      parameters:
        - name: accountId
          in: path
          required: true
          description: This key is used to identify the account from which the folders have to be fetched. It is generated during account addition.
          schema:
            type: string
        - name: folderId
          in: query
          description: The unique identifier for the folder from which the emails need to be retrieved. This can be fetched using the Get all folders API.
          schema:
            type: integer
            format: int64
        - name: start
          in: query
          description: The starting sequence number of the emails to be retrieved.
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          description: The number of emails to be retrieved from the start value mentioned. Allowed values:- Min. value:- 1 and max. value:- 200.
          schema:
            type: integer
            format: int32
            default: 10
            minimum: 1
            maximum: 200
        - name: status
          in: query
          description: Retrieve emails by read or unread status.
          schema:
            type: string
            enum: [read, unread, all]
            default: all
        - name: flagid
          in: query
          description: The unique identifier for the flag used to retrieve emails based on a specific flag type.
          schema:
            type: integer
            format: int32
            description: >-
              Possible values: 
                                0 - flag_not_set
                                1 - info
                                2 - important
                                3 - followup
        - name: labelid
          in: query
          description: The unique identifier for the label used to retrieve emails based on a specific label.
          schema:
            type: integer
            format: int64
        - name: threadId
          in: query
          description: The unique identifier for the flag used to retrieve emails of the given threadId.
          schema:
            type: integer
            format: int64
        - name: sortBy
          in: query
          description: The basis on which the sorting of the list of emails should be done.
          schema:
            type: string
            enum: [date, messageId, size]
            default: date
        - name: sortorder
          in: query
          description: The order in which the sorting of the list of emails should be done.
          schema:
            type: boolean
            description: true for ascending order, false for descending order
            default: false
        - name: includeto
          in: query
          description: Whether to details need to be included or not on the list of emails retrieved.
          schema:
            type: boolean
            description: true to include to details, false to not include to details.
            default: false
        - name: includesent
          in: query
          description: Whether sent emails need to be included or not on the list of emails retrieved.
          schema:
            type: boolean
            description: true to include sent emails, false to not include sent emails.
            default: false
        - name: includearchive
          in: query
          description: Whether archived emails need to be included or not on the list of emails retrieved.
          schema:
            type: boolean
            description: true to include archived emails, false to not include archived emails.
            default: false
        - name: attachedMails
          in: query
          description: Retrieve only the emails with attachments.
          schema:
            type: boolean
            description: true to retrieve the emails with attachments, false to retrieve all emails.
            default: false
        - name: inlinedMails
          in: query
          description: Retrieve only the emails with inline images.
          schema:
            type: boolean
            description: true to retrieve the emails with inline images, false to retrieve all emails.
            default: false
        - name: flaggedMails
          in: query
          description: Retrieve only flagged emails.
          schema:
            type: boolean
            description: true to retrieve flagged emails, false to retrieve all emails.
            default: false
        - name: respondedMails
          in: query
          description: Retrieve only emails with replies.
          schema:
            type: boolean
            description: true to retrieve emails with replies, false to retrieve all emails.
            default: false
        - name: threadedMails
          in: query
          description: Retrieve emails that are a part of conversations.
          schema:
            type: boolean
            description: true to retrieve threaded emails, false to retrieve all emails.
            default: false
      responses:
        "200":
          description: Fetched emails successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailsResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
components:
  schemas:
    NoDataResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
          
    AccountsResponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/Status"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Account"
            
    AccountResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          $ref: '#/components/schemas/Account'
          
    FolderResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          $ref: '#/components/schemas/Folder'
    
    FoldersResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Folder'
          
    EmailsResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Email'

    Status:
      type: object
      properties:
        code:
          type: integer
          example: 200
        description:
          type: string
          example: "success"

    Account:
      type: object
      properties:
        accountId:
          type: string
          example: "2560636000000008002"
        accountDisplayName:
          type: string
          example: "Rebecca"
        incomingUserName:
          type: string
          example: "rebecca@zylker.com"
        accountName:
          type: string
          example: "bizdemo"
        type:
          type: string
          example: "ZOHO_ACCOUNT"
        mailboxStatus:
          type: string
          example: "enabled"
        imapAccessEnabled:
          type: boolean
        popAccessEnabled:
          type: boolean
        smtpStatus:
          type: boolean
        mailForward:
          type: array
          items:
            $ref: "#/components/schemas/MailForward"
        emailAddress:
          type: array
          items:
            $ref: "#/components/schemas/EmailAddress"
        vacationResponse:
          type: array
          items:
            $ref: "#/components/schemas/VacationResponse"
        sendMailDetails:
          type: array
          items:
            $ref: "#/components/schemas/SendMailDetails"
        address:
          $ref: "#/components/schemas/Address"
        URI:
          type: string
          format: uri
          example: "https://mail.zoho.com/api/accounts/2560636000000008002"

    MailForward:
      type: object
      properties:
        mailForwardTo:
          type: string
        type:
          type: string
        status:
          type: string

    EmailAddress:
      type: object
      properties:
        isAlias:
          type: boolean
        isPrimary:
          type: boolean
        mailId:
          type: string
        isConfirmed:
          type: boolean

    VacationResponse:
      type: object
      properties:
        subject:
          type: string
        fromDate:
          type: string
          format: date
        toDate:
          type: string
          format: date
        content:
          type: string
        accountId:
          type: string
        vacationId:
          type: string

    SendMailDetails:
      type: object
      properties:
        sendMailId:
          type: string
        displayName:
          type: string
        serverName:
          type: string
        serverPort:
          type: integer
        userName:
          type: string
        connectionType:
          type: string
        fromAddress:
          type: string
        status:
          type: boolean

    Address:
      type: object
      properties:
        country:
          type: string
        streetAddr:
          type: string
        city:
          type: string
        postalCode:
          type: string
        state:
          type: string
      
    Folder:
      type: object
      properties:
        path:
          type: string
          example: "/new"
        previousFolderId:
          type: string
          example: "2560636000000076001"
        isArchived:
          type: integer
          example: 0
        folderName:
          type: string
          example: "new"
        imapAccess:
          type: boolean
          example: true
        folderType:
          type: string
          example: "Inbox"
        URI:
          type: string
          example: "https://mail.zoho.com/api/accounts/N****C0CM/folders/2560636000000076007"
        folderId:
          type: string
          example: "2560636000000076007"
          
    FolderUpdateMode:
      type: string
      enum:
        - move
        - rename
        - setViewableInIMAP
        - removeViewableInIMAP
        - markAsRead
        - emptyFolder
        
    FolderUpdatePayload:
      type: object
      required:
        - mode
      properties:
        mode:
          $ref: '#/components/schemas/FolderUpdateMode'
        parentFolderId:
          type: string
          description: This parameter refers to the folder ID of the destination parent folder where the folder should be moved.
          example: "2560636000000076001"
        previousFolderId:
          type: string
          description: This parameter refers to the folder ID of a specific folder under the destination parent folder. This determines the exact position where the folder should be placed.
          example: "2560636000000076001"
        folderName:
          type: string
          description: This parameter refers to the new name of the folder.

    Email:
      type: object
      properties:
        summary:
          type: string
          description: A brief summary of the email.
        sentDateInGMT:
          type: integer
          format: int64
          description: The sent date of the email in GMT, represented as a Unix timestamp in milliseconds.
        calendarType:
          type: integer
          description: The type of calendar associated with the email.
        subject:
          type: string
          description: The subject of the email.
        messageId:
          type: string
          description: The unique identifier of the email message.
        threadCount:
          type: string
          description: The number of emails in the thread.
        flagid:
          type: string
          description: The flag identifier associated with the email (e.g., flag_not_set).
        status2:
          type: string
          description: An alternative status code for the email.
        priority:
          type: string
          description: The priority of the email.
        hasInline:
          type: string
          description: Indicates whether the email has inline content (true/false, represented as string).
        toAddress:
          type: string
          description: The recipient's email address, including display name.
        folderId:
          type: string
          description: The unique identifier of the folder containing the email.
        ccAddress:
          type: string
          description: The CC recipient's email address, or "Not Provided".
        threadId:
          type: string
          description: The unique identifier of the email thread.
        hasAttachment:
          type: string
          description: Indicates whether the email has attachments (0 or 1, represented as string).
        size:
          type: string
          description: The size of the email.
        sender:
          type: string
          description: The sender's display name.
        receivedTime:
          type: integer
          format: int64
          description: The received time of the email, represented as a Unix timestamp in milliseconds.
        fromAddress:
          type: string
          description: The sender's email address.
        status:
          type: string
          description: The status of the email (e.g., 1 for read, 0 for unread).
  securitySchemes:
    zohomail_auth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.zoho.com/oauth/v2/auth
          tokenUrl: https://accounts.zoho.com/oauth/v2/token
          scopes:
            ZohoMail.accounts.ALL: Full access to accounts.
            ZohoMail.accounts.READ: READ access to accounts.
            ZohoMail.folders.ALL: Full access to folders.
            ZohoMail.folders.CREATE: Create a folder.
  
