openapi: 3.0.3
info:
  title: Zoho Mail API
  description: >-
    This is a Zoho Mail API OpenAPI 3.0 specification

  contact:
    email: vigneshwaran4817@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about the Zoho Mail REST API
  url: https://www.zoho.com/mail/help/api/overview.html
servers:
  - url: https://mail.zoho.com
  - url: https://mail.zoho.in
  - url: https://mail.zoho.eu
  - url: https://mail.zoho.jp
  - url: https://mail.zohocloud.ca
tags:
  - name: accounts
    description: The User Mail Account APIs help you to get and update information about the mail accounts and the related configurations and settings of the users in the organization. The following are part of Mail Accounts API
    externalDocs:
      description: Find out more
      url: https://www.zoho.com/mail/help/api/account-api.html
  - name: folders
    description: The Folder APIs help you to get and update information about the Folder details of a particular user account.
    externalDocs:
      description: Find out more
      url: https://www.zoho.com/mail/help/api/folders-api.html
  - name: labels
    description: The Label APIs help you to get and update information about the label details of a particular user account.
    externalDocs:
      description: Find out more
      url: https://www.zoho.com/mail/help/api/labels-api.html
  - name: email
    description: The Message APIs help you to retrieve messages from the user account and access them.
    externalDocs:
      description: Find out more
      url: https://www.zoho.com/mail/help/api/email-api.html
paths:
  /api/accounts:
    get:
      tags:
        - accounts
      summary: Get all accounts
      description: This API is used to retrieve all the accounts details of the authenticated user.
      operationId: getmailaccounts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
      security:
        - zohomail_auth:
            - ZohoMail.accounts.ALL
            - ZohoMail.accounts.READ
  /api/accounts/{accountId}:
    get:
      tags:
        - accounts
      summary: Get Specific Account Details
      description: Retrieve details of a specific Zoho Mail account.
      operationId: getAccountDetails
      parameters:
        - name: accountId
          in: path
          description: Unique identifier of the account.
          required: true
          schema:
            type: string
      security:
        - zohomail_auth:
            - ZohoMail.accounts.ALL
            - ZohoMail.accounts.READ
      responses:
        "200":
          description: Successful response with account details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
                
  /api/accounts/{accountId}/folders:
    post:
      tags:
        - folders
      summary: Create a New Folder
      description: Adds a new folder to a specific account.
      operationId: createFolder
      parameters:
        - name: accountId
          in: path
          required: true
          description: The ID of the account where the folder will be created.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - folderName
              properties:
                folderName:
                  type: string
                  description: The name of the folder to be created.
                  example: "newFolder"
                parentFolderId:
                  type: string
                  description: The ID of the parent folder under which the new folder is created.
                  example: "2560636000000076001"
                parentFolderPath:
                  type: string
                  description: The path of the parent folder under which the new folder is created.
                  example: "/Inbox"
      responses:
        "201":
          description: Folder successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
    get:
      tags:
        - folders
      summary: Get all folders of the account
      description: This API is used to list all the folders within the specified account.
      operationId: getAllFolders
      parameters:
        - name: accountId
          in: path
          required: true
          description: The ID of the account where the folder will be listed.
          schema:
            type: string
      responses:
        "200":
          description: Fetched all folders successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoldersResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
          
  /api/accounts/{accountId}/folders/{folderId}:
    get:
      tags:
          - folders
      summary: Get a specific folder of the account
      description: This API is used to retrieve a specific folder in a specific account, using the account ID and the folder ID.
      operationId: getFolder
      parameters:
        - name: accountId
          in: path
          required: true
          description: The ID of the account where the folder will be listed.
          schema:
            type: string
        - name: folderId
          in: path
          required: true
          description: This key is used to identify the folder to be fetched.
          schema:
            type: string
      responses:
        "200":
          description: Fetched folder successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
    put:
      tags:
        - folders
      summary: Update a folder
      description: This API serves the purpose of updating folders with various modes.
      operationId: updateFolder
      parameters:
        - name: accountId
          in: path
          required: true
          description: This key is used to identify the account from which the folders have to be fetched. It is generated during account addition.
          schema:
            type: string
        - name: folderId
          in: path
          required: true
          description: This key is used to identify the folder to be fetched.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FolderUpdatePayload"
              
      responses:
        "200":
          description: Updated folder successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoDataResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
    delete:
      tags:
        - folders
      summary: Delete a folder
      description: This API is used to delete a specific folder in a specific account, using the account ID and the folder ID.
      operationId: deleteFolder
      parameters:
        - name: accountId
          in: path
          required: true
          description: This key is used to identify the account from which the folders have to be fetched. It is generated during account addition.
          schema:
            type: string
        - name: folderId
          in: path
          required: true
          description: This key is used to identify the folder to be fetched.
          schema:
            type: string
      responses:
        "200":
          description: Deleted folder successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoDataResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
  /api/accounts/{accountId}/messages/view:
    get:
      tags:
        - email
      summary: Retrieves emails
      description: The API retrieves a list of all the emails in a specific folder or a list of emails based on predefined conditions like status/flags/labels, and more. 
      operationId: listEmails
      parameters:
        - name: accountId
          in: path
          required: true
          description: This key is used to identify the account from which the folders have to be fetched. It is generated during account addition.
          schema:
            type: string
        - name: folderId
          in: query
          description: The unique identifier for the folder from which the emails need to be retrieved. This can be fetched using the Get all folders API.
          schema:
            type: integer
            format: int64
        - name: start
          in: query
          description: The starting sequence number of the emails to be retrieved.
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          description: The number of emails to be retrieved from the start value mentioned. Allowed values:- Min. value:- 1 and max. value:- 200.
          schema:
            type: integer
            format: int32
            default: 10
            minimum: 1
            maximum: 200
        - name: status
          in: query
          description: Retrieve emails by read or unread status.
          schema:
            type: string
            enum: [read, unread, all]
            default: all
        - name: flagid
          in: query
          description: The unique identifier for the flag used to retrieve emails based on a specific flag type.
          schema:
            type: integer
            format: int32
            description: >-
              Possible values: 
                                0 - flag_not_set
                                1 - info
                                2 - important
                                3 - followup
        - name: labelid
          in: query
          description: The unique identifier for the label used to retrieve emails based on a specific label.
          schema:
            type: integer
            format: int64
        - name: threadId
          in: query
          description: The unique identifier for the flag used to retrieve emails of the given threadId.
          schema:
            type: integer
            format: int64
        - name: sortBy
          in: query
          description: The basis on which the sorting of the list of emails should be done.
          schema:
            type: string
            enum: [date, messageId, size]
            default: date
        - name: sortorder
          in: query
          description: The order in which the sorting of the list of emails should be done.
          schema:
            type: boolean
            description: true for ascending order, false for descending order
            default: false
        - name: includeto
          in: query
          description: Whether to details need to be included or not on the list of emails retrieved.
          schema:
            type: boolean
            description: true to include to details, false to not include to details.
            default: false
        - name: includesent
          in: query
          description: Whether sent emails need to be included or not on the list of emails retrieved.
          schema:
            type: boolean
            description: true to include sent emails, false to not include sent emails.
            default: false
        - name: includearchive
          in: query
          description: Whether archived emails need to be included or not on the list of emails retrieved.
          schema:
            type: boolean
            description: true to include archived emails, false to not include archived emails.
            default: false
        - name: attachedMails
          in: query
          description: Retrieve only the emails with attachments.
          schema:
            type: boolean
            description: true to retrieve the emails with attachments, false to retrieve all emails.
            default: false
        - name: inlinedMails
          in: query
          description: Retrieve only the emails with inline images.
          schema:
            type: boolean
            description: true to retrieve the emails with inline images, false to retrieve all emails.
            default: false
        - name: flaggedMails
          in: query
          description: Retrieve only flagged emails.
          schema:
            type: boolean
            description: true to retrieve flagged emails, false to retrieve all emails.
            default: false
        - name: respondedMails
          in: query
          description: Retrieve only emails with replies.
          schema:
            type: boolean
            description: true to retrieve emails with replies, false to retrieve all emails.
            default: false
        - name: threadedMails
          in: query
          description: Retrieve emails that are a part of conversations.
          schema:
            type: boolean
            description: true to retrieve threaded emails, false to retrieve all emails.
            default: false
      responses:
        "200":
          description: Fetched emails successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailsResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
  /api/accounts/{accountId}/messages/search:
    get:
      tags:
        - email
      summary: Searches emails
      description: The API retrieves the list of emails, based on the custom search terms and parameters.
      operationId: searchEmails
      parameters:
        - name: accountId
          in: path
          required: true
          description: This key is used to identify the account from which the folders have to be fetched. It is generated during account addition.
          schema:
            type: string
        - name: searchKey
          in: query
          description: Specifies the search criteria. Ensure that the searchKey is constructed using the search syntax defined in this help page. For example:- To search for new emails, provide the searchKey as newMails.
          required: true
          schema:
            type: string
        - name: receivedTime
          in: query
          description: Specifies the time before which emails were received. It allows users to filter emails based on their received timestamp. Format:- Unix timestamp in milliseconds. Example:- 1609459200000. By default, the API retrieves emails received before 2 minutes from the current time unless a specific timestamp is provided.
          schema:
            type: integer
            format: int64
        - name: start
          in: query
          description: Specifies the starting sequence number of the emails to be retrieved.
          schema:
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          description: Specifies the number of emails to be retrieved from the start value mentioned. Allowed values:- Min. value:- 1 and max. value:- 200.
          schema:
            type: integer
            format: int32
            default: 10
            minimum: 1
            maximum: 200
        - name: includeto
          in: query
          description: Specifies whether To details need to be included or not on the list of emails retrieved.
          schema:
            type: boolean
            description: true to include To details, false to not include To details.
            default: false
      responses:
        "200":
          description: Fetched emails successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailsResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
  /api/accounts/{accountId}/folders/{folderId}/messages/{messageId}/header:
    get:
      tags:
        - email
      summary: Retrives message headers
      description: The API retrieves the internet message headers of a particular email, based on the message ID passed as the request parameter. 
      operationId: getMessageHeader
      parameters:
        - name: accountId
          in: path
          required: true
          description: This key is used to identify the account from which the folders have to be fetched. It is generated during account addition.
          schema:
            type: string
        - name: folderId
          in: path
          required: true
          description: This key is used to identify the folder to be used.
          schema:
            type: string
        - name: messageId
          in: path
          required: true
          description: This key is used to identify the message to be used.
          schema:
            type: string
        - name: raw
          in: query
          schema:
            type: boolean
            description: This parameter is used to specify the response format of message headers.
            default: true
      responses:
        "200":
          description: Fetched email header successfully
          content:
            application/json:
              schema:
                anyOf:
                 - $ref: '#/components/schemas/EmailHeaderResponse'
                 - $ref: '#/components/schemas/EmailHeaderRawResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
  /api/accounts/{accountId}/folders/{folderId}/messages/{messageId}/content:
    get:
      tags:
        - email
      summary: Retrives the content of email
      description: This API is used to retrieve the message contents of an email based on the message ID passed in the request URL. In case, you retrieve an email from a thread, you can add the includeBlockContent parameter to get the reply email and the parent email separately. If block content is available but the includeBlockContent parameter is not passed, then the original email content can only be retrieved.
      operationId: getMessageContent
      parameters:
        - name: accountId
          in: path
          required: true
          description: This key is used to identify the account from which the folders have to be fetched. It is generated during account addition.
          schema:
            type: string
        - name: folderId
          in: path
          required: true
          description: This key is used to identify the folder to be used.
          schema:
            type: string
        - name: messageId
          in: path
          required: true
          description: This key is used to identify the message to be used.
          schema:
            type: string
        - name: includeBlockContent
          in: query
          schema:
            type: boolean
            description: This parameter specifies whether to include the block quote content in an email along with the email content.
            default: false
      responses:
        "200":
          description: Fetched email content successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailContentResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
  /api/accounts/{accountId}/messages/{messageId}/originalmessage:
    get:
      tags:
        - email
      summary: Retrives the original content of email
      description: This API retrieves the MIME representation of an email message.
      operationId: getOriginalMessage
      parameters:
        - name: accountId
          in: path
          required: true
          description: This key is used to identify the account from which the folders have to be fetched. It is generated during account addition.
          schema:
            type: string
        - name: messageId
          in: path
          required: true
          description: This key is used to identify the message to be used.
          schema:
            type: string
      responses:
        "200":
          description: Fetched email original content successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailContentResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
  /api/accounts/{accountId}/folders/{folderId}/messages/{messageId}/details:
    get:
      tags:
        - email
      summary: Retrives the message details
      description: The API retrieves the metadata information of an email based on the message ID passed in the request URL.
      operationId: getMessageDetails
      parameters:
        - name: accountId
          in: path
          required: true
          description: This key is used to identify the account from which the folders have to be fetched. It is generated during account addition.
          schema:
            type: string
        - name: folderId
          in: path
          required: true
          description: This key is used to identify the folder to be used.
          schema:
            type: string
        - name: messageId
          in: path
          required: true
          description: This key is used to identify the message to be used.
          schema:
            type: string
      responses:
        "200":
          description: Fetched email details successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
  /api/accounts/{accountId}/folders/{folderId}/messages/{messageId}/attachmentinfo:
    get:
      tags:
        - email
      summary: Retrives the message attachment details
      description: The API retrieves the attachment information of a particular email, based on the message ID passed in the request URL.
      operationId: getMessageAttachmentInfo
      parameters:
        - name: accountId
          in: path
          required: true
          description: This key is used to identify the account from which the folders have to be fetched. It is generated during account addition.
          schema:
            type: string
        - name: folderId
          in: path
          required: true
          description: This key is used to identify the folder to be used.
          schema:
            type: string
        - name: messageId
          in: path
          required: true
          description: This key is used to identify the message to be used.
          schema:
            type: string
      responses:
        "200":
          description: Fetched email attachment details successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentInfoResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
  /api/accounts/{accountId}/folders/{folderId}/messages/{messageId}/attachments/{attachmentId}:
    get:
      tags:
        - email
      summary: Retrives the message attachment content
      description: The API is used to retrieve the content of the attachments in an email. In case, there are multiple attachments, the user needs to use the api for each attachment with the respective details.
      operationId: getMessageAttachmentContent
      parameters:
        - name: accountId
          in: path
          required: true
          description: This key is used to identify the account from which the folders have to be fetched. It is generated during account addition.
          schema:
            type: string
        - name: folderId
          in: path
          required: true
          description: This key is used to identify the folder to be used.
          schema:
            type: string
        - name: messageId
          in: path
          required: true
          description: This key is used to identify the message to be used.
          schema:
            type: string
        - name: attachmentId
          in: path
          required: true
          description: This parameter is the unique ID associated with the particular attachment.
          schema:
            type: string
      responses:
        "200":
          description: The attachment file whose parameter is passed in the Request Parameter is extracted and the entire content stream is received as a response. The stream can be directly used to write it as a file or use it for other purpose, like uploading to any other servers or accounts.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
          
  /api/accounts/{accountId}/updatemessage:
    put:
      tags:
        - email
      summary: Update messages
      description: Perform different message update actions with the mode field
      operationId: updateMessage
      parameters:
        - name: accountId
          in: path
          required: true
          description: This key is used to identify the account from which the folders have to be fetched. It is generated during account addition.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageUpdatePayload"
      responses:
        "200":
            description: Updated message successfully.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/NoDataResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
          
  /api/accounts/{accountId}/folders/{folderId}/messages/{messageId}:
    delete:
      tags:
        - email
      summary: Delete a email
      description: This API is used to delete an email.
      operationId: deleteEmail
      parameters:
        - name: accountId
          in: path
          required: true
          description: This key is used to identify the account from which the folders have to be fetched. It is generated during account addition.
          schema:
            type: string
        - name: folderId
          in: path
          required: true
          description: This key is used to identify the folder to be used.
          schema:
            type: string
        - name: messageId
          in: path
          required: true
          description: This key is used to identify the message to be used.
          schema:
            type: string
        - name: expunge
          in: query
          schema:
            type: boolean
            description: This parameter specifies whether the email should be deleted permanently without moving it to the trash folder.
            default: false
      responses:
        "200":
          description: Fetched email details successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageDeleteResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
          
  /api/accounts/{accountId}/messages:
    post:
      tags:
        - email
      summary: Send mail/ Save draft or template
      description: This API is used to send an email.
      operationId: sendEmail
      parameters:
        - name: accountId
          in: path
          required: true
          description: This key is used to identify the account from which the folders have to be fetched. It is generated during account addition.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendEmailRequest"
      responses:
        "200":
          description: Sent email successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoDataResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
  
  /api/accounts/{accountId}/messages/attachments:
    post:
      tags:
        - email
      summary: Upload attachment
      description: This API allows you to upload attachments before using the file in an email.
      operationId: uploadAttachments
      parameters:
        - name: accountId
          in: path
          required: true
          description: This key is used to identify the account from which the folders have to be fetched. It is generated during account addition.
          schema:
            type: string
        - name: uploadType
          description: To upload multiple attachments, this multipart value is mandatory. 
          in: query
          schema:
            type: string
            enum:
              - multipart
        - name: isInline
          description: Specifies whether you want to attach an inline image or not.
          in: query
          schema:
            type: boolean
            default: false
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The binary data of the attachment file.
                attach:
                  type: string
                  format: binary
                  description: The binary data of the attachment file.
                fileName:
                  type: string
                  description: The name of the attachment file.
                isInline:
                  type: boolean
                  description: Whether the attachment is inline.
      responses:
        "200":
          description: Uploaded attachment successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentsResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
        
  /api/accounts/{accountId}/messages/{messageId}:
    post:
      tags:
        - email
      summary: Send reply to email
      description: This API is used to send a reply to a received email.
      operationId: sendReplyEmail
      parameters:
        - name: accountId
          in: path
          required: true
          description: This key is used to identify the account from which the folders have to be fetched. It is generated during account addition.
          schema:
            type: string
        - name: messageId
          in: path
          required: true
          description: This key is used to identify the message to be used.
          schema:
            type: string    
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendEmailRequest"
      responses:
        "200":
          description: Replied email successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoDataResponse'
        '400':
          description: Invalid input passed
        '404':
          description: Page not found
        '500':
          description: Internal Error
        
components:
  schemas:
    NoDataResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
          
    AccountsResponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/Status"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Account"
            
    AccountResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          $ref: '#/components/schemas/Account'
          
    FolderResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          $ref: '#/components/schemas/Folder'
    
    FoldersResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Folder'
          
    EmailsResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Email'
            
    EmailHeaderResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          $ref: '#/components/schemas/EmailHeaderDetails'
              
    EmailHeaderRawResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          type: object
          properties:
            headerContent:
              type: string
            messageId:
              type: string
              
    EmailContentResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          type: object
          properties:
            messageId:
              type: string
            content:
              type: string
              
    EmailResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          $ref: '#/components/schemas/Email'
          
    AttachmentInfoResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          type: object
          properties:
            attachments:
              type: array
              items:
                $ref: '#/components/schemas/EmailAttachment'
            messageId:
              type: string
              
    MessageDeleteResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          type: object
          properties:
            cId:
              type: string
              
    AttachmentsResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
              
    Status:
      type: object
      properties:
        code:
          type: integer
          example: 200
        description:
          type: string
          example: "success"

    Account:
      type: object
      properties:
        accountId:
          type: string
          example: "2560636000000008002"
        accountDisplayName:
          type: string
          example: "Rebecca"
        incomingUserName:
          type: string
          example: "rebecca@zylker.com"
        accountName:
          type: string
          example: "bizdemo"
        type:
          type: string
          example: "ZOHO_ACCOUNT"
        mailboxStatus:
          type: string
          example: "enabled"
        imapAccessEnabled:
          type: boolean
        popAccessEnabled:
          type: boolean
        smtpStatus:
          type: boolean
        mailForward:
          type: array
          items:
            $ref: "#/components/schemas/MailForward"
        emailAddress:
          type: array
          items:
            $ref: "#/components/schemas/EmailAddress"
        vacationResponse:
          type: array
          items:
            $ref: "#/components/schemas/VacationResponse"
        sendMailDetails:
          type: array
          items:
            $ref: "#/components/schemas/SendMailDetails"
        address:
          $ref: "#/components/schemas/Address"
        URI:
          type: string
          format: uri
          example: "https://mail.zoho.com/api/accounts/2560636000000008002"

    MailForward:
      type: object
      properties:
        mailForwardTo:
          type: string
        type:
          type: string
        status:
          type: string

    EmailAddress:
      type: object
      properties:
        isAlias:
          type: boolean
        isPrimary:
          type: boolean
        mailId:
          type: string
        isConfirmed:
          type: boolean

    VacationResponse:
      type: object
      properties:
        subject:
          type: string
        fromDate:
          type: string
          format: date
        toDate:
          type: string
          format: date
        content:
          type: string
        accountId:
          type: string
        vacationId:
          type: string

    SendMailDetails:
      type: object
      properties:
        sendMailId:
          type: string
        displayName:
          type: string
        serverName:
          type: string
        serverPort:
          type: integer
        userName:
          type: string
        connectionType:
          type: string
        fromAddress:
          type: string
        status:
          type: boolean

    Address:
      type: object
      properties:
        country:
          type: string
        streetAddr:
          type: string
        city:
          type: string
        postalCode:
          type: string
        state:
          type: string
      
    Folder:
      type: object
      properties:
        path:
          type: string
          example: "/new"
        previousFolderId:
          type: string
          example: "2560636000000076001"
        isArchived:
          type: integer
          example: 0
        folderName:
          type: string
          example: "new"
        imapAccess:
          type: boolean
          example: true
        folderType:
          type: string
          example: "Inbox"
        URI:
          type: string
          example: "https://mail.zoho.com/api/accounts/N****C0CM/folders/2560636000000076007"
        folderId:
          type: string
          example: "2560636000000076007"
          
    FolderUpdateMode:
      type: string
      enum:
        - move
        - rename
        - setViewableInIMAP
        - removeViewableInIMAP
        - markAsRead
        - emptyFolder
        
    FolderUpdatePayload:
      type: object
      required:
        - mode
      properties:
        mode:
          $ref: '#/components/schemas/FolderUpdateMode'
        parentFolderId:
          type: string
          description: This parameter refers to the folder ID of the destination parent folder where the folder should be moved.
          example: "2560636000000076001"
        previousFolderId:
          type: string
          description: This parameter refers to the folder ID of a specific folder under the destination parent folder. This determines the exact position where the folder should be placed.
          example: "2560636000000076001"
        folderName:
          type: string
          description: This parameter refers to the new name of the folder.

    Email:
      type: object
      properties:
        summary:
          type: string
          description: A brief summary of the email.
        sentDateInGMT:
          type: string
          description: The sent date of the email in GMT, represented as a Unix timestamp in milliseconds.
        calendarType:
          type: integer
          description: The type of calendar associated with the email.
        subject:
          type: string
          description: The subject of the email.
        messageId:
          type: string
          description: The unique identifier of the email message.
        threadCount:
          type: string
          description: The number of emails in the thread.
        flagid:
          type: string
          description: The flag identifier associated with the email (e.g., flag_not_set).
        status2:
          type: string
          description: An alternative status code for the email.
        priority:
          type: string
          description: The priority of the email.
        hasInline:
          type: string
          description: Indicates whether the email has inline content (true/false, represented as string).
        toAddress:
          type: string
          description: The recipient's email address, including display name.
        folderId:
          type: string
          description: The unique identifier of the folder containing the email.
        ccAddress:
          type: string
          description: The CC recipient's email address, or "Not Provided".
        threadId:
          type: string
          description: The unique identifier of the email thread.
        hasAttachment:
          type: string
          description: Indicates whether the email has attachments (0 or 1, represented as string).
        size:
          type: string
          description: The size of the email.
        sender:
          type: string
          description: The sender's display name.
        receivedTime:
          type: string
          description: The received time of the email, represented as a Unix timestamp in milliseconds.
        fromAddress:
          type: string
          description: The sender's email address.
        status:
          type: string
          description: The status of the email (e.g., 1 for read, 0 for unread).
          
    EmailHeaderDetails:
      type: object
      properties:
        headerContent:
          type: object
          properties:
            Importance:
              type: array
              items:
                type: string
            X-Mailer:
              type: array
              items:
                type: string
            X-Zoho-Virus-Status:
              type: array
              items:
                type: string
            Received:
              type: array
              items:
                type: string
            User-Agent:
              type: array
              items:
                type: string
            From:
              type: array
              items:
                type: string
            To:
              type: array
              items:
                type: string
            Message-Id:
              type: array
              items:
                type: string
            Date:
              type: array
              items:
                type: string
            Subject:
              type: array
              items:
                type: string
            MIME-Version:
              type: array
              items:
                type: string
            Content-Type:
              type: array
              items:
                type: string
        messageId:
          type: integer
          format: int64
        
    EmailAttachment:
      type: object
      properties:
        attachmentSize:
          type: integer
          description: Size of the attachment in bytes.
        attachmentName:
          type: string
          description: Name of the attachment file.
        attachmentId:
          type: string
          description: Unique identifier for the attachment.
          
    MessageUpdateMode:
      type: string
      enum:
        - markAsRead
        - markAsUnread
        - moveMessage
        - setFlag
        - applyLabel
        - removeLabel
        - removeAllLabels
        - archiveMails
        - unArchiveMails
        - moveToSpam
        - markNotSpam
        
    MessageFlag:
      type: string
      enum:
        - info
        - important
        - followup
        - flag_not_set
          
    MessageUpdatePayload:
      type: object
      required: 
        - mode
        - messageId
      properties:
        mode:
          $ref: '#/components/schemas/MessageUpdateMode'
        messageId:
          type: array
          items:
            type: string
        threadId:
          type: array
          items:
            type: string
        isFolderSpecific:
          type: boolean
          default: false
        folderId:
          type: string
        labelId:
          type: array
          items:
            type: string
        isArchive:
          type: boolean
          default: false
        flagid:
          $ref: '#/components/schemas/MessageFlag'
        destfolderId:
          type: string
          
    SendEmailMode:
      type: string
      enum:
        - draft
        - template
          
    SendEmailRequest:
      type: object
      required:
        - fromAddress
        - toAddress
      properties:
        fromAddress:
          type: string
          description: Provide the sender's email address (associated to the authenticated account). Allowed values:- Valid email address corresponding to the authenticated account for the From field.
        toAddress:
          type: string
          description: Provide the recipient's email address. Allowed values:- Valid recipient email address for the To field.
        ccAddress:
          type: string
          description: Provide the recipient's email address for the Cc field. Allowed values:- Valid recipient email address for the Cc field.
        bccAddress:
          type: string
          description: Provide the recipient's email address for the Bcc field. Allowed values:- Valid recipient email address for the Bcc field.
        subject:
          type: string
          description: Provide the subject of the email.
        content:
          type: string
          description: Provide the content of the email.
        mailFormat:
          type: string
          enum:
            - html
            - plaintext
          description: Specify the format in which the mail needs to be sent. The value can be html or plaintext. The default value is html.
          default: html
        askReceipt:
          type: string
          enum:
            - yes
            - no
          description: Specifies whether Read receipt from the recipient is requested or not. Allowed values:- yes - Requesting a read receipt. no - Not requesting a read receipt
        encoding:
          type: string
          enum:
            - Big5
            - EUC-JP
            - EUC-KR
            - GB2312
            - ISO-2022-JP
            - ISO-8859-1
            - KOI8-R
            - Shift_JIS
            - US-ASCII
            - UTF-8
            - WINDOWS-1251
            - X-WINDOWS-ISO2022JP
          description: Specifies the encoding that is to be used in the email content. Allowed values:- Big5, EUC-JP, EUC-KR, GB2312, ISO-2022-JP, ISO-8859-1, KOI8-R, Shift_JIS, US-ASCII, UTF-8, WINDOWS-1251, X-WINDOWS-ISO2022JP. The default value is UTF-8.
          default: UTF-8
        isSchedule:
          type: boolean
          description: Depending on whether the mail has to be scheduled or not, the value can be true - if the email should be scheduled. false - if the email should be sent immediately.
        scheduleType:
          type: integer
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
          description: Specifies the type of scheduling. Allowed values:- 1 - Schedules email to be sent after one hour from the time of the request. 2 - Schedules email to be sent after two hours from the time of the request. 3 - Schedules email to be sent after four hours from the time of the request. 4 - Schedules email to be sent by the morning of the next day from the time of the request. 5 - Schedules email to be sent by the afternoon of the next day from the time of the request. 6 - Schedules email to be sent on the custom date and time of your choice.
        timeZone:
          type: string
          description: Specify the timezone to schedule your email. This parameter is mandatory if scheduleType is set to value 6. For example:- GMT 5.30 (India Standard Time - Asia/Calcutta).
        scheduleTime:
          type: string
          description: Specify the date and time you want to schedule your email. This parameter is mandatory if scheduleType is set to value 6. Format:- MM/DD/YYYY HH:MM:SS. For example:- 09/15/2023 14:30:28
        attachments:
          type: array
          items:
            type: object
            properties:
              attachmentName:
                type: string
                description: Specifies the name of the attachment. This parameter can be fetched from Upload Attachments API.
              attachmentPath:
                type: string
                description: Specifies the path in which the attachment is stored. This parameter can be fetched from Upload Attachments API.
              storeName:
                type: string
                description: Specifies the name of the store where the attachment is saved. This parameter can be fetched from Upload Attachments API.
        mode:
          $ref: '#/components/schemas/SendEmailMode'
        action:
          type: string
          enum:
            - reply
          
    Attachment:
      type: object
      properties:
        storeName:
          type: string
          description: store name.
        attachmentName:
          type: string
          description: Name of the attachment file.
        attachmentPath:
          type: string
          description: Attachment Path
        url:
          type: string
          
  securitySchemes:
    zohomail_auth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.zoho.com/oauth/v2/auth
          tokenUrl: https://accounts.zoho.com/oauth/v2/token
          scopes:
            ZohoMail.accounts.ALL: Full access to accounts.
            ZohoMail.accounts.READ: READ access to accounts.
            ZohoMail.folders.ALL: Full access to folders.
            ZohoMail.folders.CREATE: Create a folder.
            ZohoMail.messages.CREATE: Send email
            ZohoMail.messages.ALL: Full access to messages
            ZohoMail.messages.READ: Read access to messages
            
  
