/*
Zoho Mail API

This is a Zoho Mail API OpenAPI 3.0 specification

API version: 1.0.0
Contact: vigneshwaran4817@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zmail

import (
	"encoding/json"
	"fmt"
)

// SendEmailMode the model 'SendEmailMode'
type SendEmailMode string

// List of SendEmailMode
const (
	DRAFT SendEmailMode = "draft"
	TEMPLATE SendEmailMode = "template"
)

// All allowed values of SendEmailMode enum
var AllowedSendEmailModeEnumValues = []SendEmailMode{
	"draft",
	"template",
}

func (v *SendEmailMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SendEmailMode(value)
	for _, existing := range AllowedSendEmailModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SendEmailMode", value)
}

// NewSendEmailModeFromValue returns a pointer to a valid SendEmailMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSendEmailModeFromValue(v string) (*SendEmailMode, error) {
	ev := SendEmailMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SendEmailMode: valid values are %v", v, AllowedSendEmailModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SendEmailMode) IsValid() bool {
	for _, existing := range AllowedSendEmailModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SendEmailMode value
func (v SendEmailMode) Ptr() *SendEmailMode {
	return &v
}

type NullableSendEmailMode struct {
	value *SendEmailMode
	isSet bool
}

func (v NullableSendEmailMode) Get() *SendEmailMode {
	return v.value
}

func (v *NullableSendEmailMode) Set(val *SendEmailMode) {
	v.value = val
	v.isSet = true
}

func (v NullableSendEmailMode) IsSet() bool {
	return v.isSet
}

func (v *NullableSendEmailMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendEmailMode(val *SendEmailMode) *NullableSendEmailMode {
	return &NullableSendEmailMode{value: val, isSet: true}
}

func (v NullableSendEmailMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendEmailMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

