/*
Zoho Mail API

This is a Zoho Mail API OpenAPI 3.0 specification

API version: 1.0.0
Contact: vigneshwaran4817@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zmail

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SendEmailRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendEmailRequest{}

// SendEmailRequest struct for SendEmailRequest
type SendEmailRequest struct {
	// Provide the sender's email address (associated to the authenticated account). Allowed values:- Valid email address corresponding to the authenticated account for the From field.
	FromAddress string `json:"fromAddress"`
	// Provide the recipient's email address. Allowed values:- Valid recipient email address for the To field.
	ToAddress string `json:"toAddress"`
	// Provide the recipient's email address for the Cc field. Allowed values:- Valid recipient email address for the Cc field.
	CcAddress *string `json:"ccAddress,omitempty"`
	// Provide the recipient's email address for the Bcc field. Allowed values:- Valid recipient email address for the Bcc field.
	BccAddress *string `json:"bccAddress,omitempty"`
	// Provide the subject of the email.
	Subject *string `json:"subject,omitempty"`
	// Provide the content of the email.
	Content *string `json:"content,omitempty"`
	// Specify the format in which the mail needs to be sent. The value can be html or plaintext. The default value is html.
	MailFormat *string `json:"mailFormat,omitempty"`
	// Specifies whether Read receipt from the recipient is requested or not. Allowed values:- yes - Requesting a read receipt. no - Not requesting a read receipt
	AskReceipt *string `json:"askReceipt,omitempty"`
	// Specifies the encoding that is to be used in the email content. Allowed values:- Big5, EUC-JP, EUC-KR, GB2312, ISO-2022-JP, ISO-8859-1, KOI8-R, Shift_JIS, US-ASCII, UTF-8, WINDOWS-1251, X-WINDOWS-ISO2022JP. The default value is UTF-8.
	Encoding *string `json:"encoding,omitempty"`
	// Depending on whether the mail has to be scheduled or not, the value can be true - if the email should be scheduled. false - if the email should be sent immediately.
	IsSchedule *bool `json:"isSchedule,omitempty"`
	// Specifies the type of scheduling. Allowed values:- 1 - Schedules email to be sent after one hour from the time of the request. 2 - Schedules email to be sent after two hours from the time of the request. 3 - Schedules email to be sent after four hours from the time of the request. 4 - Schedules email to be sent by the morning of the next day from the time of the request. 5 - Schedules email to be sent by the afternoon of the next day from the time of the request. 6 - Schedules email to be sent on the custom date and time of your choice.
	ScheduleType *int32 `json:"scheduleType,omitempty"`
	// Specify the timezone to schedule your email. This parameter is mandatory if scheduleType is set to value 6. For example:- GMT 5.30 (India Standard Time - Asia/Calcutta).
	TimeZone *string `json:"timeZone,omitempty"`
	// Specify the date and time you want to schedule your email. This parameter is mandatory if scheduleType is set to value 6. Format:- MM/DD/YYYY HH:MM:SS. For example:- 09/15/2023 14:30:28
	ScheduleTime *string `json:"scheduleTime,omitempty"`
	Attachments []SendEmailRequestAttachmentsInner `json:"attachments,omitempty"`
	Mode *SendEmailMode `json:"mode,omitempty"`
	Action *string `json:"action,omitempty"`
}

type _SendEmailRequest SendEmailRequest

// NewSendEmailRequest instantiates a new SendEmailRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendEmailRequest(fromAddress string, toAddress string) *SendEmailRequest {
	this := SendEmailRequest{}
	this.FromAddress = fromAddress
	this.ToAddress = toAddress
	var mailFormat string = "html"
	this.MailFormat = &mailFormat
	var encoding string = "UTF-8"
	this.Encoding = &encoding
	return &this
}

// NewSendEmailRequestWithDefaults instantiates a new SendEmailRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendEmailRequestWithDefaults() *SendEmailRequest {
	this := SendEmailRequest{}
	var mailFormat string = "html"
	this.MailFormat = &mailFormat
	var encoding string = "UTF-8"
	this.Encoding = &encoding
	return &this
}

// GetFromAddress returns the FromAddress field value
func (o *SendEmailRequest) GetFromAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromAddress
}

// GetFromAddressOk returns a tuple with the FromAddress field value
// and a boolean to check if the value has been set.
func (o *SendEmailRequest) GetFromAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromAddress, true
}

// SetFromAddress sets field value
func (o *SendEmailRequest) SetFromAddress(v string) {
	o.FromAddress = v
}

// GetToAddress returns the ToAddress field value
func (o *SendEmailRequest) GetToAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToAddress
}

// GetToAddressOk returns a tuple with the ToAddress field value
// and a boolean to check if the value has been set.
func (o *SendEmailRequest) GetToAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToAddress, true
}

// SetToAddress sets field value
func (o *SendEmailRequest) SetToAddress(v string) {
	o.ToAddress = v
}

// GetCcAddress returns the CcAddress field value if set, zero value otherwise.
func (o *SendEmailRequest) GetCcAddress() string {
	if o == nil || IsNil(o.CcAddress) {
		var ret string
		return ret
	}
	return *o.CcAddress
}

// GetCcAddressOk returns a tuple with the CcAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendEmailRequest) GetCcAddressOk() (*string, bool) {
	if o == nil || IsNil(o.CcAddress) {
		return nil, false
	}
	return o.CcAddress, true
}

// HasCcAddress returns a boolean if a field has been set.
func (o *SendEmailRequest) HasCcAddress() bool {
	if o != nil && !IsNil(o.CcAddress) {
		return true
	}

	return false
}

// SetCcAddress gets a reference to the given string and assigns it to the CcAddress field.
func (o *SendEmailRequest) SetCcAddress(v string) {
	o.CcAddress = &v
}

// GetBccAddress returns the BccAddress field value if set, zero value otherwise.
func (o *SendEmailRequest) GetBccAddress() string {
	if o == nil || IsNil(o.BccAddress) {
		var ret string
		return ret
	}
	return *o.BccAddress
}

// GetBccAddressOk returns a tuple with the BccAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendEmailRequest) GetBccAddressOk() (*string, bool) {
	if o == nil || IsNil(o.BccAddress) {
		return nil, false
	}
	return o.BccAddress, true
}

// HasBccAddress returns a boolean if a field has been set.
func (o *SendEmailRequest) HasBccAddress() bool {
	if o != nil && !IsNil(o.BccAddress) {
		return true
	}

	return false
}

// SetBccAddress gets a reference to the given string and assigns it to the BccAddress field.
func (o *SendEmailRequest) SetBccAddress(v string) {
	o.BccAddress = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *SendEmailRequest) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendEmailRequest) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *SendEmailRequest) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *SendEmailRequest) SetSubject(v string) {
	o.Subject = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *SendEmailRequest) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendEmailRequest) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *SendEmailRequest) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *SendEmailRequest) SetContent(v string) {
	o.Content = &v
}

// GetMailFormat returns the MailFormat field value if set, zero value otherwise.
func (o *SendEmailRequest) GetMailFormat() string {
	if o == nil || IsNil(o.MailFormat) {
		var ret string
		return ret
	}
	return *o.MailFormat
}

// GetMailFormatOk returns a tuple with the MailFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendEmailRequest) GetMailFormatOk() (*string, bool) {
	if o == nil || IsNil(o.MailFormat) {
		return nil, false
	}
	return o.MailFormat, true
}

// HasMailFormat returns a boolean if a field has been set.
func (o *SendEmailRequest) HasMailFormat() bool {
	if o != nil && !IsNil(o.MailFormat) {
		return true
	}

	return false
}

// SetMailFormat gets a reference to the given string and assigns it to the MailFormat field.
func (o *SendEmailRequest) SetMailFormat(v string) {
	o.MailFormat = &v
}

// GetAskReceipt returns the AskReceipt field value if set, zero value otherwise.
func (o *SendEmailRequest) GetAskReceipt() string {
	if o == nil || IsNil(o.AskReceipt) {
		var ret string
		return ret
	}
	return *o.AskReceipt
}

// GetAskReceiptOk returns a tuple with the AskReceipt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendEmailRequest) GetAskReceiptOk() (*string, bool) {
	if o == nil || IsNil(o.AskReceipt) {
		return nil, false
	}
	return o.AskReceipt, true
}

// HasAskReceipt returns a boolean if a field has been set.
func (o *SendEmailRequest) HasAskReceipt() bool {
	if o != nil && !IsNil(o.AskReceipt) {
		return true
	}

	return false
}

// SetAskReceipt gets a reference to the given string and assigns it to the AskReceipt field.
func (o *SendEmailRequest) SetAskReceipt(v string) {
	o.AskReceipt = &v
}

// GetEncoding returns the Encoding field value if set, zero value otherwise.
func (o *SendEmailRequest) GetEncoding() string {
	if o == nil || IsNil(o.Encoding) {
		var ret string
		return ret
	}
	return *o.Encoding
}

// GetEncodingOk returns a tuple with the Encoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendEmailRequest) GetEncodingOk() (*string, bool) {
	if o == nil || IsNil(o.Encoding) {
		return nil, false
	}
	return o.Encoding, true
}

// HasEncoding returns a boolean if a field has been set.
func (o *SendEmailRequest) HasEncoding() bool {
	if o != nil && !IsNil(o.Encoding) {
		return true
	}

	return false
}

// SetEncoding gets a reference to the given string and assigns it to the Encoding field.
func (o *SendEmailRequest) SetEncoding(v string) {
	o.Encoding = &v
}

// GetIsSchedule returns the IsSchedule field value if set, zero value otherwise.
func (o *SendEmailRequest) GetIsSchedule() bool {
	if o == nil || IsNil(o.IsSchedule) {
		var ret bool
		return ret
	}
	return *o.IsSchedule
}

// GetIsScheduleOk returns a tuple with the IsSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendEmailRequest) GetIsScheduleOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSchedule) {
		return nil, false
	}
	return o.IsSchedule, true
}

// HasIsSchedule returns a boolean if a field has been set.
func (o *SendEmailRequest) HasIsSchedule() bool {
	if o != nil && !IsNil(o.IsSchedule) {
		return true
	}

	return false
}

// SetIsSchedule gets a reference to the given bool and assigns it to the IsSchedule field.
func (o *SendEmailRequest) SetIsSchedule(v bool) {
	o.IsSchedule = &v
}

// GetScheduleType returns the ScheduleType field value if set, zero value otherwise.
func (o *SendEmailRequest) GetScheduleType() int32 {
	if o == nil || IsNil(o.ScheduleType) {
		var ret int32
		return ret
	}
	return *o.ScheduleType
}

// GetScheduleTypeOk returns a tuple with the ScheduleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendEmailRequest) GetScheduleTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.ScheduleType) {
		return nil, false
	}
	return o.ScheduleType, true
}

// HasScheduleType returns a boolean if a field has been set.
func (o *SendEmailRequest) HasScheduleType() bool {
	if o != nil && !IsNil(o.ScheduleType) {
		return true
	}

	return false
}

// SetScheduleType gets a reference to the given int32 and assigns it to the ScheduleType field.
func (o *SendEmailRequest) SetScheduleType(v int32) {
	o.ScheduleType = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *SendEmailRequest) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendEmailRequest) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *SendEmailRequest) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *SendEmailRequest) SetTimeZone(v string) {
	o.TimeZone = &v
}

// GetScheduleTime returns the ScheduleTime field value if set, zero value otherwise.
func (o *SendEmailRequest) GetScheduleTime() string {
	if o == nil || IsNil(o.ScheduleTime) {
		var ret string
		return ret
	}
	return *o.ScheduleTime
}

// GetScheduleTimeOk returns a tuple with the ScheduleTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendEmailRequest) GetScheduleTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduleTime) {
		return nil, false
	}
	return o.ScheduleTime, true
}

// HasScheduleTime returns a boolean if a field has been set.
func (o *SendEmailRequest) HasScheduleTime() bool {
	if o != nil && !IsNil(o.ScheduleTime) {
		return true
	}

	return false
}

// SetScheduleTime gets a reference to the given string and assigns it to the ScheduleTime field.
func (o *SendEmailRequest) SetScheduleTime(v string) {
	o.ScheduleTime = &v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *SendEmailRequest) GetAttachments() []SendEmailRequestAttachmentsInner {
	if o == nil || IsNil(o.Attachments) {
		var ret []SendEmailRequestAttachmentsInner
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendEmailRequest) GetAttachmentsOk() ([]SendEmailRequestAttachmentsInner, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *SendEmailRequest) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []SendEmailRequestAttachmentsInner and assigns it to the Attachments field.
func (o *SendEmailRequest) SetAttachments(v []SendEmailRequestAttachmentsInner) {
	o.Attachments = v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *SendEmailRequest) GetMode() SendEmailMode {
	if o == nil || IsNil(o.Mode) {
		var ret SendEmailMode
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendEmailRequest) GetModeOk() (*SendEmailMode, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *SendEmailRequest) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given SendEmailMode and assigns it to the Mode field.
func (o *SendEmailRequest) SetMode(v SendEmailMode) {
	o.Mode = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *SendEmailRequest) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendEmailRequest) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *SendEmailRequest) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *SendEmailRequest) SetAction(v string) {
	o.Action = &v
}

func (o SendEmailRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendEmailRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fromAddress"] = o.FromAddress
	toSerialize["toAddress"] = o.ToAddress
	if !IsNil(o.CcAddress) {
		toSerialize["ccAddress"] = o.CcAddress
	}
	if !IsNil(o.BccAddress) {
		toSerialize["bccAddress"] = o.BccAddress
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.MailFormat) {
		toSerialize["mailFormat"] = o.MailFormat
	}
	if !IsNil(o.AskReceipt) {
		toSerialize["askReceipt"] = o.AskReceipt
	}
	if !IsNil(o.Encoding) {
		toSerialize["encoding"] = o.Encoding
	}
	if !IsNil(o.IsSchedule) {
		toSerialize["isSchedule"] = o.IsSchedule
	}
	if !IsNil(o.ScheduleType) {
		toSerialize["scheduleType"] = o.ScheduleType
	}
	if !IsNil(o.TimeZone) {
		toSerialize["timeZone"] = o.TimeZone
	}
	if !IsNil(o.ScheduleTime) {
		toSerialize["scheduleTime"] = o.ScheduleTime
	}
	if !IsNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	return toSerialize, nil
}

func (o *SendEmailRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fromAddress",
		"toAddress",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSendEmailRequest := _SendEmailRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSendEmailRequest)

	if err != nil {
		return err
	}

	*o = SendEmailRequest(varSendEmailRequest)

	return err
}

type NullableSendEmailRequest struct {
	value *SendEmailRequest
	isSet bool
}

func (v NullableSendEmailRequest) Get() *SendEmailRequest {
	return v.value
}

func (v *NullableSendEmailRequest) Set(val *SendEmailRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSendEmailRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSendEmailRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendEmailRequest(val *SendEmailRequest) *NullableSendEmailRequest {
	return &NullableSendEmailRequest{value: val, isSet: true}
}

func (v NullableSendEmailRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendEmailRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


