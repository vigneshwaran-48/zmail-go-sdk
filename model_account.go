/*
Zoho Mail API

This is a Zoho Mail API OpenAPI 3.0 specification

API version: 1.0.0
Contact: vigneshwaran4817@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zmail

import (
	"encoding/json"
)

// checks if the Account type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Account{}

// Account struct for Account
type Account struct {
	AccountId *string `json:"accountId,omitempty"`
	AccountDisplayName *string `json:"accountDisplayName,omitempty"`
	IncomingUserName *string `json:"incomingUserName,omitempty"`
	AccountName *string `json:"accountName,omitempty"`
	Type *string `json:"type,omitempty"`
	MailboxStatus *string `json:"mailboxStatus,omitempty"`
	ImapAccessEnabled *bool `json:"imapAccessEnabled,omitempty"`
	PopAccessEnabled *bool `json:"popAccessEnabled,omitempty"`
	SmtpStatus *bool `json:"smtpStatus,omitempty"`
	MailForward []MailForward `json:"mailForward,omitempty"`
	EmailAddress []EmailAddress `json:"emailAddress,omitempty"`
	VacationResponse []VacationResponse `json:"vacationResponse,omitempty"`
	SendMailDetails []SendMailDetails `json:"sendMailDetails,omitempty"`
	Address *Address `json:"address,omitempty"`
	URI *string `json:"URI,omitempty"`
}

// NewAccount instantiates a new Account object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccount() *Account {
	this := Account{}
	return &this
}

// NewAccountWithDefaults instantiates a new Account object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountWithDefaults() *Account {
	this := Account{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *Account) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *Account) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *Account) SetAccountId(v string) {
	o.AccountId = &v
}

// GetAccountDisplayName returns the AccountDisplayName field value if set, zero value otherwise.
func (o *Account) GetAccountDisplayName() string {
	if o == nil || IsNil(o.AccountDisplayName) {
		var ret string
		return ret
	}
	return *o.AccountDisplayName
}

// GetAccountDisplayNameOk returns a tuple with the AccountDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetAccountDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccountDisplayName) {
		return nil, false
	}
	return o.AccountDisplayName, true
}

// HasAccountDisplayName returns a boolean if a field has been set.
func (o *Account) HasAccountDisplayName() bool {
	if o != nil && !IsNil(o.AccountDisplayName) {
		return true
	}

	return false
}

// SetAccountDisplayName gets a reference to the given string and assigns it to the AccountDisplayName field.
func (o *Account) SetAccountDisplayName(v string) {
	o.AccountDisplayName = &v
}

// GetIncomingUserName returns the IncomingUserName field value if set, zero value otherwise.
func (o *Account) GetIncomingUserName() string {
	if o == nil || IsNil(o.IncomingUserName) {
		var ret string
		return ret
	}
	return *o.IncomingUserName
}

// GetIncomingUserNameOk returns a tuple with the IncomingUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetIncomingUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.IncomingUserName) {
		return nil, false
	}
	return o.IncomingUserName, true
}

// HasIncomingUserName returns a boolean if a field has been set.
func (o *Account) HasIncomingUserName() bool {
	if o != nil && !IsNil(o.IncomingUserName) {
		return true
	}

	return false
}

// SetIncomingUserName gets a reference to the given string and assigns it to the IncomingUserName field.
func (o *Account) SetIncomingUserName(v string) {
	o.IncomingUserName = &v
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *Account) GetAccountName() string {
	if o == nil || IsNil(o.AccountName) {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccountName) {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *Account) HasAccountName() bool {
	if o != nil && !IsNil(o.AccountName) {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *Account) SetAccountName(v string) {
	o.AccountName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Account) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Account) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Account) SetType(v string) {
	o.Type = &v
}

// GetMailboxStatus returns the MailboxStatus field value if set, zero value otherwise.
func (o *Account) GetMailboxStatus() string {
	if o == nil || IsNil(o.MailboxStatus) {
		var ret string
		return ret
	}
	return *o.MailboxStatus
}

// GetMailboxStatusOk returns a tuple with the MailboxStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetMailboxStatusOk() (*string, bool) {
	if o == nil || IsNil(o.MailboxStatus) {
		return nil, false
	}
	return o.MailboxStatus, true
}

// HasMailboxStatus returns a boolean if a field has been set.
func (o *Account) HasMailboxStatus() bool {
	if o != nil && !IsNil(o.MailboxStatus) {
		return true
	}

	return false
}

// SetMailboxStatus gets a reference to the given string and assigns it to the MailboxStatus field.
func (o *Account) SetMailboxStatus(v string) {
	o.MailboxStatus = &v
}

// GetImapAccessEnabled returns the ImapAccessEnabled field value if set, zero value otherwise.
func (o *Account) GetImapAccessEnabled() bool {
	if o == nil || IsNil(o.ImapAccessEnabled) {
		var ret bool
		return ret
	}
	return *o.ImapAccessEnabled
}

// GetImapAccessEnabledOk returns a tuple with the ImapAccessEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetImapAccessEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ImapAccessEnabled) {
		return nil, false
	}
	return o.ImapAccessEnabled, true
}

// HasImapAccessEnabled returns a boolean if a field has been set.
func (o *Account) HasImapAccessEnabled() bool {
	if o != nil && !IsNil(o.ImapAccessEnabled) {
		return true
	}

	return false
}

// SetImapAccessEnabled gets a reference to the given bool and assigns it to the ImapAccessEnabled field.
func (o *Account) SetImapAccessEnabled(v bool) {
	o.ImapAccessEnabled = &v
}

// GetPopAccessEnabled returns the PopAccessEnabled field value if set, zero value otherwise.
func (o *Account) GetPopAccessEnabled() bool {
	if o == nil || IsNil(o.PopAccessEnabled) {
		var ret bool
		return ret
	}
	return *o.PopAccessEnabled
}

// GetPopAccessEnabledOk returns a tuple with the PopAccessEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetPopAccessEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PopAccessEnabled) {
		return nil, false
	}
	return o.PopAccessEnabled, true
}

// HasPopAccessEnabled returns a boolean if a field has been set.
func (o *Account) HasPopAccessEnabled() bool {
	if o != nil && !IsNil(o.PopAccessEnabled) {
		return true
	}

	return false
}

// SetPopAccessEnabled gets a reference to the given bool and assigns it to the PopAccessEnabled field.
func (o *Account) SetPopAccessEnabled(v bool) {
	o.PopAccessEnabled = &v
}

// GetSmtpStatus returns the SmtpStatus field value if set, zero value otherwise.
func (o *Account) GetSmtpStatus() bool {
	if o == nil || IsNil(o.SmtpStatus) {
		var ret bool
		return ret
	}
	return *o.SmtpStatus
}

// GetSmtpStatusOk returns a tuple with the SmtpStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetSmtpStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.SmtpStatus) {
		return nil, false
	}
	return o.SmtpStatus, true
}

// HasSmtpStatus returns a boolean if a field has been set.
func (o *Account) HasSmtpStatus() bool {
	if o != nil && !IsNil(o.SmtpStatus) {
		return true
	}

	return false
}

// SetSmtpStatus gets a reference to the given bool and assigns it to the SmtpStatus field.
func (o *Account) SetSmtpStatus(v bool) {
	o.SmtpStatus = &v
}

// GetMailForward returns the MailForward field value if set, zero value otherwise.
func (o *Account) GetMailForward() []MailForward {
	if o == nil || IsNil(o.MailForward) {
		var ret []MailForward
		return ret
	}
	return o.MailForward
}

// GetMailForwardOk returns a tuple with the MailForward field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetMailForwardOk() ([]MailForward, bool) {
	if o == nil || IsNil(o.MailForward) {
		return nil, false
	}
	return o.MailForward, true
}

// HasMailForward returns a boolean if a field has been set.
func (o *Account) HasMailForward() bool {
	if o != nil && !IsNil(o.MailForward) {
		return true
	}

	return false
}

// SetMailForward gets a reference to the given []MailForward and assigns it to the MailForward field.
func (o *Account) SetMailForward(v []MailForward) {
	o.MailForward = v
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise.
func (o *Account) GetEmailAddress() []EmailAddress {
	if o == nil || IsNil(o.EmailAddress) {
		var ret []EmailAddress
		return ret
	}
	return o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetEmailAddressOk() ([]EmailAddress, bool) {
	if o == nil || IsNil(o.EmailAddress) {
		return nil, false
	}
	return o.EmailAddress, true
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *Account) HasEmailAddress() bool {
	if o != nil && !IsNil(o.EmailAddress) {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given []EmailAddress and assigns it to the EmailAddress field.
func (o *Account) SetEmailAddress(v []EmailAddress) {
	o.EmailAddress = v
}

// GetVacationResponse returns the VacationResponse field value if set, zero value otherwise.
func (o *Account) GetVacationResponse() []VacationResponse {
	if o == nil || IsNil(o.VacationResponse) {
		var ret []VacationResponse
		return ret
	}
	return o.VacationResponse
}

// GetVacationResponseOk returns a tuple with the VacationResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetVacationResponseOk() ([]VacationResponse, bool) {
	if o == nil || IsNil(o.VacationResponse) {
		return nil, false
	}
	return o.VacationResponse, true
}

// HasVacationResponse returns a boolean if a field has been set.
func (o *Account) HasVacationResponse() bool {
	if o != nil && !IsNil(o.VacationResponse) {
		return true
	}

	return false
}

// SetVacationResponse gets a reference to the given []VacationResponse and assigns it to the VacationResponse field.
func (o *Account) SetVacationResponse(v []VacationResponse) {
	o.VacationResponse = v
}

// GetSendMailDetails returns the SendMailDetails field value if set, zero value otherwise.
func (o *Account) GetSendMailDetails() []SendMailDetails {
	if o == nil || IsNil(o.SendMailDetails) {
		var ret []SendMailDetails
		return ret
	}
	return o.SendMailDetails
}

// GetSendMailDetailsOk returns a tuple with the SendMailDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetSendMailDetailsOk() ([]SendMailDetails, bool) {
	if o == nil || IsNil(o.SendMailDetails) {
		return nil, false
	}
	return o.SendMailDetails, true
}

// HasSendMailDetails returns a boolean if a field has been set.
func (o *Account) HasSendMailDetails() bool {
	if o != nil && !IsNil(o.SendMailDetails) {
		return true
	}

	return false
}

// SetSendMailDetails gets a reference to the given []SendMailDetails and assigns it to the SendMailDetails field.
func (o *Account) SetSendMailDetails(v []SendMailDetails) {
	o.SendMailDetails = v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *Account) GetAddress() Address {
	if o == nil || IsNil(o.Address) {
		var ret Address
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetAddressOk() (*Address, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *Account) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given Address and assigns it to the Address field.
func (o *Account) SetAddress(v Address) {
	o.Address = &v
}

// GetURI returns the URI field value if set, zero value otherwise.
func (o *Account) GetURI() string {
	if o == nil || IsNil(o.URI) {
		var ret string
		return ret
	}
	return *o.URI
}

// GetURIOk returns a tuple with the URI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetURIOk() (*string, bool) {
	if o == nil || IsNil(o.URI) {
		return nil, false
	}
	return o.URI, true
}

// HasURI returns a boolean if a field has been set.
func (o *Account) HasURI() bool {
	if o != nil && !IsNil(o.URI) {
		return true
	}

	return false
}

// SetURI gets a reference to the given string and assigns it to the URI field.
func (o *Account) SetURI(v string) {
	o.URI = &v
}

func (o Account) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Account) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !IsNil(o.AccountDisplayName) {
		toSerialize["accountDisplayName"] = o.AccountDisplayName
	}
	if !IsNil(o.IncomingUserName) {
		toSerialize["incomingUserName"] = o.IncomingUserName
	}
	if !IsNil(o.AccountName) {
		toSerialize["accountName"] = o.AccountName
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.MailboxStatus) {
		toSerialize["mailboxStatus"] = o.MailboxStatus
	}
	if !IsNil(o.ImapAccessEnabled) {
		toSerialize["imapAccessEnabled"] = o.ImapAccessEnabled
	}
	if !IsNil(o.PopAccessEnabled) {
		toSerialize["popAccessEnabled"] = o.PopAccessEnabled
	}
	if !IsNil(o.SmtpStatus) {
		toSerialize["smtpStatus"] = o.SmtpStatus
	}
	if !IsNil(o.MailForward) {
		toSerialize["mailForward"] = o.MailForward
	}
	if !IsNil(o.EmailAddress) {
		toSerialize["emailAddress"] = o.EmailAddress
	}
	if !IsNil(o.VacationResponse) {
		toSerialize["vacationResponse"] = o.VacationResponse
	}
	if !IsNil(o.SendMailDetails) {
		toSerialize["sendMailDetails"] = o.SendMailDetails
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.URI) {
		toSerialize["URI"] = o.URI
	}
	return toSerialize, nil
}

type NullableAccount struct {
	value *Account
	isSet bool
}

func (v NullableAccount) Get() *Account {
	return v.value
}

func (v *NullableAccount) Set(val *Account) {
	v.value = val
	v.isSet = true
}

func (v NullableAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccount(val *Account) *NullableAccount {
	return &NullableAccount{value: val, isSet: true}
}

func (v NullableAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


