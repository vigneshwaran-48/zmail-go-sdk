/*
Zoho Mail API

This is a Zoho Mail API OpenAPI 3.0 specification

API version: 1.0.0
Contact: vigneshwaran4817@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zmail

import (
	"encoding/json"
)

// checks if the EmailResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailResponse{}

// EmailResponse struct for EmailResponse
type EmailResponse struct {
	Status *Status `json:"status,omitempty"`
	Data *Email `json:"data,omitempty"`
}

// NewEmailResponse instantiates a new EmailResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailResponse() *EmailResponse {
	this := EmailResponse{}
	return &this
}

// NewEmailResponseWithDefaults instantiates a new EmailResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailResponseWithDefaults() *EmailResponse {
	this := EmailResponse{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EmailResponse) GetStatus() Status {
	if o == nil || IsNil(o.Status) {
		var ret Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailResponse) GetStatusOk() (*Status, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EmailResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Status and assigns it to the Status field.
func (o *EmailResponse) SetStatus(v Status) {
	o.Status = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *EmailResponse) GetData() Email {
	if o == nil || IsNil(o.Data) {
		var ret Email
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailResponse) GetDataOk() (*Email, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *EmailResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given Email and assigns it to the Data field.
func (o *EmailResponse) SetData(v Email) {
	o.Data = &v
}

func (o EmailResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableEmailResponse struct {
	value *EmailResponse
	isSet bool
}

func (v NullableEmailResponse) Get() *EmailResponse {
	return v.value
}

func (v *NullableEmailResponse) Set(val *EmailResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailResponse(val *EmailResponse) *NullableEmailResponse {
	return &NullableEmailResponse{value: val, isSet: true}
}

func (v NullableEmailResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


