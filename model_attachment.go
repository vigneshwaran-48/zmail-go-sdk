/*
Zoho Mail API

This is a Zoho Mail API OpenAPI 3.0 specification

API version: 1.0.0
Contact: vigneshwaran4817@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zmail

import (
	"encoding/json"
)

// checks if the Attachment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Attachment{}

// Attachment struct for Attachment
type Attachment struct {
	// Size of the attachment in bytes.
	AttachmentSize *int32 `json:"attachmentSize,omitempty"`
	// Name of the attachment file.
	AttachmentName *string `json:"attachmentName,omitempty"`
	// Unique identifier for the attachment.
	AttachmentId *string `json:"attachmentId,omitempty"`
}

// NewAttachment instantiates a new Attachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachment() *Attachment {
	this := Attachment{}
	return &this
}

// NewAttachmentWithDefaults instantiates a new Attachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachmentWithDefaults() *Attachment {
	this := Attachment{}
	return &this
}

// GetAttachmentSize returns the AttachmentSize field value if set, zero value otherwise.
func (o *Attachment) GetAttachmentSize() int32 {
	if o == nil || IsNil(o.AttachmentSize) {
		var ret int32
		return ret
	}
	return *o.AttachmentSize
}

// GetAttachmentSizeOk returns a tuple with the AttachmentSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetAttachmentSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.AttachmentSize) {
		return nil, false
	}
	return o.AttachmentSize, true
}

// HasAttachmentSize returns a boolean if a field has been set.
func (o *Attachment) HasAttachmentSize() bool {
	if o != nil && !IsNil(o.AttachmentSize) {
		return true
	}

	return false
}

// SetAttachmentSize gets a reference to the given int32 and assigns it to the AttachmentSize field.
func (o *Attachment) SetAttachmentSize(v int32) {
	o.AttachmentSize = &v
}

// GetAttachmentName returns the AttachmentName field value if set, zero value otherwise.
func (o *Attachment) GetAttachmentName() string {
	if o == nil || IsNil(o.AttachmentName) {
		var ret string
		return ret
	}
	return *o.AttachmentName
}

// GetAttachmentNameOk returns a tuple with the AttachmentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetAttachmentNameOk() (*string, bool) {
	if o == nil || IsNil(o.AttachmentName) {
		return nil, false
	}
	return o.AttachmentName, true
}

// HasAttachmentName returns a boolean if a field has been set.
func (o *Attachment) HasAttachmentName() bool {
	if o != nil && !IsNil(o.AttachmentName) {
		return true
	}

	return false
}

// SetAttachmentName gets a reference to the given string and assigns it to the AttachmentName field.
func (o *Attachment) SetAttachmentName(v string) {
	o.AttachmentName = &v
}

// GetAttachmentId returns the AttachmentId field value if set, zero value otherwise.
func (o *Attachment) GetAttachmentId() string {
	if o == nil || IsNil(o.AttachmentId) {
		var ret string
		return ret
	}
	return *o.AttachmentId
}

// GetAttachmentIdOk returns a tuple with the AttachmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetAttachmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.AttachmentId) {
		return nil, false
	}
	return o.AttachmentId, true
}

// HasAttachmentId returns a boolean if a field has been set.
func (o *Attachment) HasAttachmentId() bool {
	if o != nil && !IsNil(o.AttachmentId) {
		return true
	}

	return false
}

// SetAttachmentId gets a reference to the given string and assigns it to the AttachmentId field.
func (o *Attachment) SetAttachmentId(v string) {
	o.AttachmentId = &v
}

func (o Attachment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Attachment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttachmentSize) {
		toSerialize["attachmentSize"] = o.AttachmentSize
	}
	if !IsNil(o.AttachmentName) {
		toSerialize["attachmentName"] = o.AttachmentName
	}
	if !IsNil(o.AttachmentId) {
		toSerialize["attachmentId"] = o.AttachmentId
	}
	return toSerialize, nil
}

type NullableAttachment struct {
	value *Attachment
	isSet bool
}

func (v NullableAttachment) Get() *Attachment {
	return v.value
}

func (v *NullableAttachment) Set(val *Attachment) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachment(val *Attachment) *NullableAttachment {
	return &NullableAttachment{value: val, isSet: true}
}

func (v NullableAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


