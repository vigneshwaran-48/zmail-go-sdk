/*
Zoho Mail API

This is a Zoho Mail API OpenAPI 3.0 specification

API version: 1.0.0
Contact: vigneshwaran4817@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zmail

import (
	"encoding/json"
)

// checks if the Email type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Email{}

// Email struct for Email
type Email struct {
	// A brief summary of the email.
	Summary *string `json:"summary,omitempty"`
	// The sent date of the email in GMT, represented as a Unix timestamp in milliseconds.
	SentDateInGMT *string `json:"sentDateInGMT,omitempty"`
	// The type of calendar associated with the email.
	CalendarType *int32 `json:"calendarType,omitempty"`
	// The subject of the email.
	Subject *string `json:"subject,omitempty"`
	// The unique identifier of the email message.
	MessageId *string `json:"messageId,omitempty"`
	// The number of emails in the thread.
	ThreadCount *string `json:"threadCount,omitempty"`
	// The flag identifier associated with the email (e.g., flag_not_set).
	Flagid *string `json:"flagid,omitempty"`
	// An alternative status code for the email.
	Status2 *string `json:"status2,omitempty"`
	// The priority of the email.
	Priority *string `json:"priority,omitempty"`
	// Indicates whether the email has inline content (true/false, represented as string).
	HasInline *string `json:"hasInline,omitempty"`
	// The recipient's email address, including display name.
	ToAddress *string `json:"toAddress,omitempty"`
	// The unique identifier of the folder containing the email.
	FolderId *string `json:"folderId,omitempty"`
	// The CC recipient's email address, or \"Not Provided\".
	CcAddress *string `json:"ccAddress,omitempty"`
	// The unique identifier of the email thread.
	ThreadId *string `json:"threadId,omitempty"`
	// Indicates whether the email has attachments (0 or 1, represented as string).
	HasAttachment *string `json:"hasAttachment,omitempty"`
	// The size of the email.
	Size *string `json:"size,omitempty"`
	// The sender's display name.
	Sender *string `json:"sender,omitempty"`
	// The received time of the email, represented as a Unix timestamp in milliseconds.
	ReceivedTime *string `json:"receivedTime,omitempty"`
	// The sender's email address.
	FromAddress *string `json:"fromAddress,omitempty"`
	// The status of the email (e.g., 1 for read, 0 for unread).
	Status *string `json:"status,omitempty"`
}

// NewEmail instantiates a new Email object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmail() *Email {
	this := Email{}
	return &this
}

// NewEmailWithDefaults instantiates a new Email object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailWithDefaults() *Email {
	this := Email{}
	return &this
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *Email) GetSummary() string {
	if o == nil || IsNil(o.Summary) {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetSummaryOk() (*string, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *Email) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *Email) SetSummary(v string) {
	o.Summary = &v
}

// GetSentDateInGMT returns the SentDateInGMT field value if set, zero value otherwise.
func (o *Email) GetSentDateInGMT() string {
	if o == nil || IsNil(o.SentDateInGMT) {
		var ret string
		return ret
	}
	return *o.SentDateInGMT
}

// GetSentDateInGMTOk returns a tuple with the SentDateInGMT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetSentDateInGMTOk() (*string, bool) {
	if o == nil || IsNil(o.SentDateInGMT) {
		return nil, false
	}
	return o.SentDateInGMT, true
}

// HasSentDateInGMT returns a boolean if a field has been set.
func (o *Email) HasSentDateInGMT() bool {
	if o != nil && !IsNil(o.SentDateInGMT) {
		return true
	}

	return false
}

// SetSentDateInGMT gets a reference to the given string and assigns it to the SentDateInGMT field.
func (o *Email) SetSentDateInGMT(v string) {
	o.SentDateInGMT = &v
}

// GetCalendarType returns the CalendarType field value if set, zero value otherwise.
func (o *Email) GetCalendarType() int32 {
	if o == nil || IsNil(o.CalendarType) {
		var ret int32
		return ret
	}
	return *o.CalendarType
}

// GetCalendarTypeOk returns a tuple with the CalendarType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetCalendarTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.CalendarType) {
		return nil, false
	}
	return o.CalendarType, true
}

// HasCalendarType returns a boolean if a field has been set.
func (o *Email) HasCalendarType() bool {
	if o != nil && !IsNil(o.CalendarType) {
		return true
	}

	return false
}

// SetCalendarType gets a reference to the given int32 and assigns it to the CalendarType field.
func (o *Email) SetCalendarType(v int32) {
	o.CalendarType = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *Email) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *Email) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *Email) SetSubject(v string) {
	o.Subject = &v
}

// GetMessageId returns the MessageId field value if set, zero value otherwise.
func (o *Email) GetMessageId() string {
	if o == nil || IsNil(o.MessageId) {
		var ret string
		return ret
	}
	return *o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetMessageIdOk() (*string, bool) {
	if o == nil || IsNil(o.MessageId) {
		return nil, false
	}
	return o.MessageId, true
}

// HasMessageId returns a boolean if a field has been set.
func (o *Email) HasMessageId() bool {
	if o != nil && !IsNil(o.MessageId) {
		return true
	}

	return false
}

// SetMessageId gets a reference to the given string and assigns it to the MessageId field.
func (o *Email) SetMessageId(v string) {
	o.MessageId = &v
}

// GetThreadCount returns the ThreadCount field value if set, zero value otherwise.
func (o *Email) GetThreadCount() string {
	if o == nil || IsNil(o.ThreadCount) {
		var ret string
		return ret
	}
	return *o.ThreadCount
}

// GetThreadCountOk returns a tuple with the ThreadCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetThreadCountOk() (*string, bool) {
	if o == nil || IsNil(o.ThreadCount) {
		return nil, false
	}
	return o.ThreadCount, true
}

// HasThreadCount returns a boolean if a field has been set.
func (o *Email) HasThreadCount() bool {
	if o != nil && !IsNil(o.ThreadCount) {
		return true
	}

	return false
}

// SetThreadCount gets a reference to the given string and assigns it to the ThreadCount field.
func (o *Email) SetThreadCount(v string) {
	o.ThreadCount = &v
}

// GetFlagid returns the Flagid field value if set, zero value otherwise.
func (o *Email) GetFlagid() string {
	if o == nil || IsNil(o.Flagid) {
		var ret string
		return ret
	}
	return *o.Flagid
}

// GetFlagidOk returns a tuple with the Flagid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetFlagidOk() (*string, bool) {
	if o == nil || IsNil(o.Flagid) {
		return nil, false
	}
	return o.Flagid, true
}

// HasFlagid returns a boolean if a field has been set.
func (o *Email) HasFlagid() bool {
	if o != nil && !IsNil(o.Flagid) {
		return true
	}

	return false
}

// SetFlagid gets a reference to the given string and assigns it to the Flagid field.
func (o *Email) SetFlagid(v string) {
	o.Flagid = &v
}

// GetStatus2 returns the Status2 field value if set, zero value otherwise.
func (o *Email) GetStatus2() string {
	if o == nil || IsNil(o.Status2) {
		var ret string
		return ret
	}
	return *o.Status2
}

// GetStatus2Ok returns a tuple with the Status2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetStatus2Ok() (*string, bool) {
	if o == nil || IsNil(o.Status2) {
		return nil, false
	}
	return o.Status2, true
}

// HasStatus2 returns a boolean if a field has been set.
func (o *Email) HasStatus2() bool {
	if o != nil && !IsNil(o.Status2) {
		return true
	}

	return false
}

// SetStatus2 gets a reference to the given string and assigns it to the Status2 field.
func (o *Email) SetStatus2(v string) {
	o.Status2 = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *Email) GetPriority() string {
	if o == nil || IsNil(o.Priority) {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetPriorityOk() (*string, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *Email) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *Email) SetPriority(v string) {
	o.Priority = &v
}

// GetHasInline returns the HasInline field value if set, zero value otherwise.
func (o *Email) GetHasInline() string {
	if o == nil || IsNil(o.HasInline) {
		var ret string
		return ret
	}
	return *o.HasInline
}

// GetHasInlineOk returns a tuple with the HasInline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetHasInlineOk() (*string, bool) {
	if o == nil || IsNil(o.HasInline) {
		return nil, false
	}
	return o.HasInline, true
}

// HasHasInline returns a boolean if a field has been set.
func (o *Email) HasHasInline() bool {
	if o != nil && !IsNil(o.HasInline) {
		return true
	}

	return false
}

// SetHasInline gets a reference to the given string and assigns it to the HasInline field.
func (o *Email) SetHasInline(v string) {
	o.HasInline = &v
}

// GetToAddress returns the ToAddress field value if set, zero value otherwise.
func (o *Email) GetToAddress() string {
	if o == nil || IsNil(o.ToAddress) {
		var ret string
		return ret
	}
	return *o.ToAddress
}

// GetToAddressOk returns a tuple with the ToAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetToAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ToAddress) {
		return nil, false
	}
	return o.ToAddress, true
}

// HasToAddress returns a boolean if a field has been set.
func (o *Email) HasToAddress() bool {
	if o != nil && !IsNil(o.ToAddress) {
		return true
	}

	return false
}

// SetToAddress gets a reference to the given string and assigns it to the ToAddress field.
func (o *Email) SetToAddress(v string) {
	o.ToAddress = &v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise.
func (o *Email) GetFolderId() string {
	if o == nil || IsNil(o.FolderId) {
		var ret string
		return ret
	}
	return *o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetFolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.FolderId) {
		return nil, false
	}
	return o.FolderId, true
}

// HasFolderId returns a boolean if a field has been set.
func (o *Email) HasFolderId() bool {
	if o != nil && !IsNil(o.FolderId) {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given string and assigns it to the FolderId field.
func (o *Email) SetFolderId(v string) {
	o.FolderId = &v
}

// GetCcAddress returns the CcAddress field value if set, zero value otherwise.
func (o *Email) GetCcAddress() string {
	if o == nil || IsNil(o.CcAddress) {
		var ret string
		return ret
	}
	return *o.CcAddress
}

// GetCcAddressOk returns a tuple with the CcAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetCcAddressOk() (*string, bool) {
	if o == nil || IsNil(o.CcAddress) {
		return nil, false
	}
	return o.CcAddress, true
}

// HasCcAddress returns a boolean if a field has been set.
func (o *Email) HasCcAddress() bool {
	if o != nil && !IsNil(o.CcAddress) {
		return true
	}

	return false
}

// SetCcAddress gets a reference to the given string and assigns it to the CcAddress field.
func (o *Email) SetCcAddress(v string) {
	o.CcAddress = &v
}

// GetThreadId returns the ThreadId field value if set, zero value otherwise.
func (o *Email) GetThreadId() string {
	if o == nil || IsNil(o.ThreadId) {
		var ret string
		return ret
	}
	return *o.ThreadId
}

// GetThreadIdOk returns a tuple with the ThreadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetThreadIdOk() (*string, bool) {
	if o == nil || IsNil(o.ThreadId) {
		return nil, false
	}
	return o.ThreadId, true
}

// HasThreadId returns a boolean if a field has been set.
func (o *Email) HasThreadId() bool {
	if o != nil && !IsNil(o.ThreadId) {
		return true
	}

	return false
}

// SetThreadId gets a reference to the given string and assigns it to the ThreadId field.
func (o *Email) SetThreadId(v string) {
	o.ThreadId = &v
}

// GetHasAttachment returns the HasAttachment field value if set, zero value otherwise.
func (o *Email) GetHasAttachment() string {
	if o == nil || IsNil(o.HasAttachment) {
		var ret string
		return ret
	}
	return *o.HasAttachment
}

// GetHasAttachmentOk returns a tuple with the HasAttachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetHasAttachmentOk() (*string, bool) {
	if o == nil || IsNil(o.HasAttachment) {
		return nil, false
	}
	return o.HasAttachment, true
}

// HasHasAttachment returns a boolean if a field has been set.
func (o *Email) HasHasAttachment() bool {
	if o != nil && !IsNil(o.HasAttachment) {
		return true
	}

	return false
}

// SetHasAttachment gets a reference to the given string and assigns it to the HasAttachment field.
func (o *Email) SetHasAttachment(v string) {
	o.HasAttachment = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Email) GetSize() string {
	if o == nil || IsNil(o.Size) {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetSizeOk() (*string, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Email) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *Email) SetSize(v string) {
	o.Size = &v
}

// GetSender returns the Sender field value if set, zero value otherwise.
func (o *Email) GetSender() string {
	if o == nil || IsNil(o.Sender) {
		var ret string
		return ret
	}
	return *o.Sender
}

// GetSenderOk returns a tuple with the Sender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetSenderOk() (*string, bool) {
	if o == nil || IsNil(o.Sender) {
		return nil, false
	}
	return o.Sender, true
}

// HasSender returns a boolean if a field has been set.
func (o *Email) HasSender() bool {
	if o != nil && !IsNil(o.Sender) {
		return true
	}

	return false
}

// SetSender gets a reference to the given string and assigns it to the Sender field.
func (o *Email) SetSender(v string) {
	o.Sender = &v
}

// GetReceivedTime returns the ReceivedTime field value if set, zero value otherwise.
func (o *Email) GetReceivedTime() string {
	if o == nil || IsNil(o.ReceivedTime) {
		var ret string
		return ret
	}
	return *o.ReceivedTime
}

// GetReceivedTimeOk returns a tuple with the ReceivedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetReceivedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ReceivedTime) {
		return nil, false
	}
	return o.ReceivedTime, true
}

// HasReceivedTime returns a boolean if a field has been set.
func (o *Email) HasReceivedTime() bool {
	if o != nil && !IsNil(o.ReceivedTime) {
		return true
	}

	return false
}

// SetReceivedTime gets a reference to the given string and assigns it to the ReceivedTime field.
func (o *Email) SetReceivedTime(v string) {
	o.ReceivedTime = &v
}

// GetFromAddress returns the FromAddress field value if set, zero value otherwise.
func (o *Email) GetFromAddress() string {
	if o == nil || IsNil(o.FromAddress) {
		var ret string
		return ret
	}
	return *o.FromAddress
}

// GetFromAddressOk returns a tuple with the FromAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetFromAddressOk() (*string, bool) {
	if o == nil || IsNil(o.FromAddress) {
		return nil, false
	}
	return o.FromAddress, true
}

// HasFromAddress returns a boolean if a field has been set.
func (o *Email) HasFromAddress() bool {
	if o != nil && !IsNil(o.FromAddress) {
		return true
	}

	return false
}

// SetFromAddress gets a reference to the given string and assigns it to the FromAddress field.
func (o *Email) SetFromAddress(v string) {
	o.FromAddress = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Email) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Email) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Email) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Email) SetStatus(v string) {
	o.Status = &v
}

func (o Email) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Email) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if !IsNil(o.SentDateInGMT) {
		toSerialize["sentDateInGMT"] = o.SentDateInGMT
	}
	if !IsNil(o.CalendarType) {
		toSerialize["calendarType"] = o.CalendarType
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.MessageId) {
		toSerialize["messageId"] = o.MessageId
	}
	if !IsNil(o.ThreadCount) {
		toSerialize["threadCount"] = o.ThreadCount
	}
	if !IsNil(o.Flagid) {
		toSerialize["flagid"] = o.Flagid
	}
	if !IsNil(o.Status2) {
		toSerialize["status2"] = o.Status2
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.HasInline) {
		toSerialize["hasInline"] = o.HasInline
	}
	if !IsNil(o.ToAddress) {
		toSerialize["toAddress"] = o.ToAddress
	}
	if !IsNil(o.FolderId) {
		toSerialize["folderId"] = o.FolderId
	}
	if !IsNil(o.CcAddress) {
		toSerialize["ccAddress"] = o.CcAddress
	}
	if !IsNil(o.ThreadId) {
		toSerialize["threadId"] = o.ThreadId
	}
	if !IsNil(o.HasAttachment) {
		toSerialize["hasAttachment"] = o.HasAttachment
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Sender) {
		toSerialize["sender"] = o.Sender
	}
	if !IsNil(o.ReceivedTime) {
		toSerialize["receivedTime"] = o.ReceivedTime
	}
	if !IsNil(o.FromAddress) {
		toSerialize["fromAddress"] = o.FromAddress
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableEmail struct {
	value *Email
	isSet bool
}

func (v NullableEmail) Get() *Email {
	return v.value
}

func (v *NullableEmail) Set(val *Email) {
	v.value = val
	v.isSet = true
}

func (v NullableEmail) IsSet() bool {
	return v.isSet
}

func (v *NullableEmail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmail(val *Email) *NullableEmail {
	return &NullableEmail{value: val, isSet: true}
}

func (v NullableEmail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


