/*
Zoho Mail API

This is a Zoho Mail API OpenAPI 3.0 specification

API version: 1.0.0
Contact: vigneshwaran4817@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zmail

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// EmailAPIService EmailAPI service
type EmailAPIService service

type ApiListEmailsRequest struct {
	ctx context.Context
	ApiService *EmailAPIService
	accountId string
	folderId *int64
	start *int32
	limit *int32
	status *string
	flagid *int32
	labelid *int64
	threadId *int64
	sortBy *string
	sortorder *bool
	includeto *bool
	includesent *bool
	includearchive *bool
	attachedMails *bool
	inlinedMails *bool
	flaggedMails *bool
	respondedMails *bool
	threadedMails *bool
}

// The unique identifier for the folder from which the emails need to be retrieved. This can be fetched using the Get all folders API.
func (r ApiListEmailsRequest) FolderId(folderId int64) ApiListEmailsRequest {
	r.folderId = &folderId
	return r
}

// The starting sequence number of the emails to be retrieved.
func (r ApiListEmailsRequest) Start(start int32) ApiListEmailsRequest {
	r.start = &start
	return r
}

// The number of emails to be retrieved from the start value mentioned. Allowed values:- Min. value:- 1 and max. value:- 200.
func (r ApiListEmailsRequest) Limit(limit int32) ApiListEmailsRequest {
	r.limit = &limit
	return r
}

// Retrieve emails by read or unread status.
func (r ApiListEmailsRequest) Status(status string) ApiListEmailsRequest {
	r.status = &status
	return r
}

// The unique identifier for the flag used to retrieve emails based on a specific flag type.
func (r ApiListEmailsRequest) Flagid(flagid int32) ApiListEmailsRequest {
	r.flagid = &flagid
	return r
}

// The unique identifier for the label used to retrieve emails based on a specific label.
func (r ApiListEmailsRequest) Labelid(labelid int64) ApiListEmailsRequest {
	r.labelid = &labelid
	return r
}

// The unique identifier for the flag used to retrieve emails of the given threadId.
func (r ApiListEmailsRequest) ThreadId(threadId int64) ApiListEmailsRequest {
	r.threadId = &threadId
	return r
}

// The basis on which the sorting of the list of emails should be done.
func (r ApiListEmailsRequest) SortBy(sortBy string) ApiListEmailsRequest {
	r.sortBy = &sortBy
	return r
}

// The order in which the sorting of the list of emails should be done.
func (r ApiListEmailsRequest) Sortorder(sortorder bool) ApiListEmailsRequest {
	r.sortorder = &sortorder
	return r
}

// Whether to details need to be included or not on the list of emails retrieved.
func (r ApiListEmailsRequest) Includeto(includeto bool) ApiListEmailsRequest {
	r.includeto = &includeto
	return r
}

// Whether sent emails need to be included or not on the list of emails retrieved.
func (r ApiListEmailsRequest) Includesent(includesent bool) ApiListEmailsRequest {
	r.includesent = &includesent
	return r
}

// Whether archived emails need to be included or not on the list of emails retrieved.
func (r ApiListEmailsRequest) Includearchive(includearchive bool) ApiListEmailsRequest {
	r.includearchive = &includearchive
	return r
}

// Retrieve only the emails with attachments.
func (r ApiListEmailsRequest) AttachedMails(attachedMails bool) ApiListEmailsRequest {
	r.attachedMails = &attachedMails
	return r
}

// Retrieve only the emails with inline images.
func (r ApiListEmailsRequest) InlinedMails(inlinedMails bool) ApiListEmailsRequest {
	r.inlinedMails = &inlinedMails
	return r
}

// Retrieve only flagged emails.
func (r ApiListEmailsRequest) FlaggedMails(flaggedMails bool) ApiListEmailsRequest {
	r.flaggedMails = &flaggedMails
	return r
}

// Retrieve only emails with replies.
func (r ApiListEmailsRequest) RespondedMails(respondedMails bool) ApiListEmailsRequest {
	r.respondedMails = &respondedMails
	return r
}

// Retrieve emails that are a part of conversations.
func (r ApiListEmailsRequest) ThreadedMails(threadedMails bool) ApiListEmailsRequest {
	r.threadedMails = &threadedMails
	return r
}

func (r ApiListEmailsRequest) Execute() (*EmailsResponse, *http.Response, error) {
	return r.ApiService.ListEmailsExecute(r)
}

/*
ListEmails Retrieves emails

The API retrieves a list of all the emails in a specific folder or a list of emails based on predefined conditions like status/flags/labels, and more.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId This key is used to identify the account from which the folders have to be fetched. It is generated during account addition.
 @return ApiListEmailsRequest
*/
func (a *EmailAPIService) ListEmails(ctx context.Context, accountId string) ApiListEmailsRequest {
	return ApiListEmailsRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return EmailsResponse
func (a *EmailAPIService) ListEmailsExecute(r ApiListEmailsRequest) (*EmailsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmailsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailAPIService.ListEmails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/accounts/{accountId}/messages/view"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.folderId == nil {
		return localVarReturnValue, nil, reportError("folderId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "folderId", r.folderId, "form", "")
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "form", "")
	} else {
		var defaultValue int32 = 1
		r.start = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 10
		r.limit = &defaultValue
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "form", "")
	} else {
		var defaultValue string = "all"
		r.status = &defaultValue
	}
	if r.flagid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "flagid", r.flagid, "form", "")
	}
	if r.labelid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelid", r.labelid, "form", "")
	}
	if r.threadId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "threadId", r.threadId, "form", "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "form", "")
	} else {
		var defaultValue string = "date"
		r.sortBy = &defaultValue
	}
	if r.sortorder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortorder", r.sortorder, "form", "")
	} else {
		var defaultValue bool = false
		r.sortorder = &defaultValue
	}
	if r.includeto != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeto", r.includeto, "form", "")
	} else {
		var defaultValue bool = false
		r.includeto = &defaultValue
	}
	if r.includesent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includesent", r.includesent, "form", "")
	} else {
		var defaultValue bool = false
		r.includesent = &defaultValue
	}
	if r.includearchive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includearchive", r.includearchive, "form", "")
	} else {
		var defaultValue bool = false
		r.includearchive = &defaultValue
	}
	if r.attachedMails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attachedMails", r.attachedMails, "form", "")
	} else {
		var defaultValue bool = false
		r.attachedMails = &defaultValue
	}
	if r.inlinedMails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inlinedMails", r.inlinedMails, "form", "")
	} else {
		var defaultValue bool = false
		r.inlinedMails = &defaultValue
	}
	if r.flaggedMails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "flaggedMails", r.flaggedMails, "form", "")
	} else {
		var defaultValue bool = false
		r.flaggedMails = &defaultValue
	}
	if r.respondedMails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "respondedMails", r.respondedMails, "form", "")
	} else {
		var defaultValue bool = false
		r.respondedMails = &defaultValue
	}
	if r.threadedMails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "threadedMails", r.threadedMails, "form", "")
	} else {
		var defaultValue bool = false
		r.threadedMails = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
