/*
Zoho Mail API

This is a Zoho Mail API OpenAPI 3.0 specification

API version: 1.0.0
Contact: vigneshwaran4817@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zmail

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FolderUpdatePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FolderUpdatePayload{}

// FolderUpdatePayload struct for FolderUpdatePayload
type FolderUpdatePayload struct {
	Mode FolderUpdateMode `json:"mode"`
	// This parameter refers to the folder ID of the destination parent folder where the folder should be moved.
	ParentFolderId *string `json:"parentFolderId,omitempty"`
	// This parameter refers to the folder ID of a specific folder under the destination parent folder. This determines the exact position where the folder should be placed.
	PreviousFolderId *string `json:"previousFolderId,omitempty"`
	// This parameter refers to the new name of the folder.
	FolderName *string `json:"folderName,omitempty"`
}

type _FolderUpdatePayload FolderUpdatePayload

// NewFolderUpdatePayload instantiates a new FolderUpdatePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFolderUpdatePayload(mode FolderUpdateMode) *FolderUpdatePayload {
	this := FolderUpdatePayload{}
	this.Mode = mode
	return &this
}

// NewFolderUpdatePayloadWithDefaults instantiates a new FolderUpdatePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFolderUpdatePayloadWithDefaults() *FolderUpdatePayload {
	this := FolderUpdatePayload{}
	return &this
}

// GetMode returns the Mode field value
func (o *FolderUpdatePayload) GetMode() FolderUpdateMode {
	if o == nil {
		var ret FolderUpdateMode
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *FolderUpdatePayload) GetModeOk() (*FolderUpdateMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *FolderUpdatePayload) SetMode(v FolderUpdateMode) {
	o.Mode = v
}

// GetParentFolderId returns the ParentFolderId field value if set, zero value otherwise.
func (o *FolderUpdatePayload) GetParentFolderId() string {
	if o == nil || IsNil(o.ParentFolderId) {
		var ret string
		return ret
	}
	return *o.ParentFolderId
}

// GetParentFolderIdOk returns a tuple with the ParentFolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderUpdatePayload) GetParentFolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentFolderId) {
		return nil, false
	}
	return o.ParentFolderId, true
}

// HasParentFolderId returns a boolean if a field has been set.
func (o *FolderUpdatePayload) HasParentFolderId() bool {
	if o != nil && !IsNil(o.ParentFolderId) {
		return true
	}

	return false
}

// SetParentFolderId gets a reference to the given string and assigns it to the ParentFolderId field.
func (o *FolderUpdatePayload) SetParentFolderId(v string) {
	o.ParentFolderId = &v
}

// GetPreviousFolderId returns the PreviousFolderId field value if set, zero value otherwise.
func (o *FolderUpdatePayload) GetPreviousFolderId() string {
	if o == nil || IsNil(o.PreviousFolderId) {
		var ret string
		return ret
	}
	return *o.PreviousFolderId
}

// GetPreviousFolderIdOk returns a tuple with the PreviousFolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderUpdatePayload) GetPreviousFolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.PreviousFolderId) {
		return nil, false
	}
	return o.PreviousFolderId, true
}

// HasPreviousFolderId returns a boolean if a field has been set.
func (o *FolderUpdatePayload) HasPreviousFolderId() bool {
	if o != nil && !IsNil(o.PreviousFolderId) {
		return true
	}

	return false
}

// SetPreviousFolderId gets a reference to the given string and assigns it to the PreviousFolderId field.
func (o *FolderUpdatePayload) SetPreviousFolderId(v string) {
	o.PreviousFolderId = &v
}

// GetFolderName returns the FolderName field value if set, zero value otherwise.
func (o *FolderUpdatePayload) GetFolderName() string {
	if o == nil || IsNil(o.FolderName) {
		var ret string
		return ret
	}
	return *o.FolderName
}

// GetFolderNameOk returns a tuple with the FolderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderUpdatePayload) GetFolderNameOk() (*string, bool) {
	if o == nil || IsNil(o.FolderName) {
		return nil, false
	}
	return o.FolderName, true
}

// HasFolderName returns a boolean if a field has been set.
func (o *FolderUpdatePayload) HasFolderName() bool {
	if o != nil && !IsNil(o.FolderName) {
		return true
	}

	return false
}

// SetFolderName gets a reference to the given string and assigns it to the FolderName field.
func (o *FolderUpdatePayload) SetFolderName(v string) {
	o.FolderName = &v
}

func (o FolderUpdatePayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FolderUpdatePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mode"] = o.Mode
	if !IsNil(o.ParentFolderId) {
		toSerialize["parentFolderId"] = o.ParentFolderId
	}
	if !IsNil(o.PreviousFolderId) {
		toSerialize["previousFolderId"] = o.PreviousFolderId
	}
	if !IsNil(o.FolderName) {
		toSerialize["folderName"] = o.FolderName
	}
	return toSerialize, nil
}

func (o *FolderUpdatePayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFolderUpdatePayload := _FolderUpdatePayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFolderUpdatePayload)

	if err != nil {
		return err
	}

	*o = FolderUpdatePayload(varFolderUpdatePayload)

	return err
}

type NullableFolderUpdatePayload struct {
	value *FolderUpdatePayload
	isSet bool
}

func (v NullableFolderUpdatePayload) Get() *FolderUpdatePayload {
	return v.value
}

func (v *NullableFolderUpdatePayload) Set(val *FolderUpdatePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableFolderUpdatePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableFolderUpdatePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolderUpdatePayload(val *FolderUpdatePayload) *NullableFolderUpdatePayload {
	return &NullableFolderUpdatePayload{value: val, isSet: true}
}

func (v NullableFolderUpdatePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolderUpdatePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


