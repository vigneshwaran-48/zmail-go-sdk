/*
Zoho Mail API

This is a Zoho Mail API OpenAPI 3.0 specification

API version: 1.0.0
Contact: vigneshwaran4817@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zmail

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MessageUpdatePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageUpdatePayload{}

// MessageUpdatePayload struct for MessageUpdatePayload
type MessageUpdatePayload struct {
	Mode MessageUpdateMode `json:"mode"`
	MessageId []string `json:"messageId"`
	ThreadId []string `json:"threadId,omitempty"`
	IsFolderSpecific *bool `json:"isFolderSpecific,omitempty"`
	FolderId *string `json:"folderId,omitempty"`
	LabelId []string `json:"labelId,omitempty"`
	IsArchive *bool `json:"isArchive,omitempty"`
	Flagid *MessageFlag `json:"flagid,omitempty"`
	DestfolderId *string `json:"destfolderId,omitempty"`
}

type _MessageUpdatePayload MessageUpdatePayload

// NewMessageUpdatePayload instantiates a new MessageUpdatePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageUpdatePayload(mode MessageUpdateMode, messageId []string) *MessageUpdatePayload {
	this := MessageUpdatePayload{}
	this.Mode = mode
	this.MessageId = messageId
	var isFolderSpecific bool = false
	this.IsFolderSpecific = &isFolderSpecific
	var isArchive bool = false
	this.IsArchive = &isArchive
	return &this
}

// NewMessageUpdatePayloadWithDefaults instantiates a new MessageUpdatePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageUpdatePayloadWithDefaults() *MessageUpdatePayload {
	this := MessageUpdatePayload{}
	var isFolderSpecific bool = false
	this.IsFolderSpecific = &isFolderSpecific
	var isArchive bool = false
	this.IsArchive = &isArchive
	return &this
}

// GetMode returns the Mode field value
func (o *MessageUpdatePayload) GetMode() MessageUpdateMode {
	if o == nil {
		var ret MessageUpdateMode
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *MessageUpdatePayload) GetModeOk() (*MessageUpdateMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *MessageUpdatePayload) SetMode(v MessageUpdateMode) {
	o.Mode = v
}

// GetMessageId returns the MessageId field value
func (o *MessageUpdatePayload) GetMessageId() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value
// and a boolean to check if the value has been set.
func (o *MessageUpdatePayload) GetMessageIdOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MessageId, true
}

// SetMessageId sets field value
func (o *MessageUpdatePayload) SetMessageId(v []string) {
	o.MessageId = v
}

// GetThreadId returns the ThreadId field value if set, zero value otherwise.
func (o *MessageUpdatePayload) GetThreadId() []string {
	if o == nil || IsNil(o.ThreadId) {
		var ret []string
		return ret
	}
	return o.ThreadId
}

// GetThreadIdOk returns a tuple with the ThreadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageUpdatePayload) GetThreadIdOk() ([]string, bool) {
	if o == nil || IsNil(o.ThreadId) {
		return nil, false
	}
	return o.ThreadId, true
}

// HasThreadId returns a boolean if a field has been set.
func (o *MessageUpdatePayload) HasThreadId() bool {
	if o != nil && !IsNil(o.ThreadId) {
		return true
	}

	return false
}

// SetThreadId gets a reference to the given []string and assigns it to the ThreadId field.
func (o *MessageUpdatePayload) SetThreadId(v []string) {
	o.ThreadId = v
}

// GetIsFolderSpecific returns the IsFolderSpecific field value if set, zero value otherwise.
func (o *MessageUpdatePayload) GetIsFolderSpecific() bool {
	if o == nil || IsNil(o.IsFolderSpecific) {
		var ret bool
		return ret
	}
	return *o.IsFolderSpecific
}

// GetIsFolderSpecificOk returns a tuple with the IsFolderSpecific field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageUpdatePayload) GetIsFolderSpecificOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFolderSpecific) {
		return nil, false
	}
	return o.IsFolderSpecific, true
}

// HasIsFolderSpecific returns a boolean if a field has been set.
func (o *MessageUpdatePayload) HasIsFolderSpecific() bool {
	if o != nil && !IsNil(o.IsFolderSpecific) {
		return true
	}

	return false
}

// SetIsFolderSpecific gets a reference to the given bool and assigns it to the IsFolderSpecific field.
func (o *MessageUpdatePayload) SetIsFolderSpecific(v bool) {
	o.IsFolderSpecific = &v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise.
func (o *MessageUpdatePayload) GetFolderId() string {
	if o == nil || IsNil(o.FolderId) {
		var ret string
		return ret
	}
	return *o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageUpdatePayload) GetFolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.FolderId) {
		return nil, false
	}
	return o.FolderId, true
}

// HasFolderId returns a boolean if a field has been set.
func (o *MessageUpdatePayload) HasFolderId() bool {
	if o != nil && !IsNil(o.FolderId) {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given string and assigns it to the FolderId field.
func (o *MessageUpdatePayload) SetFolderId(v string) {
	o.FolderId = &v
}

// GetLabelId returns the LabelId field value if set, zero value otherwise.
func (o *MessageUpdatePayload) GetLabelId() []string {
	if o == nil || IsNil(o.LabelId) {
		var ret []string
		return ret
	}
	return o.LabelId
}

// GetLabelIdOk returns a tuple with the LabelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageUpdatePayload) GetLabelIdOk() ([]string, bool) {
	if o == nil || IsNil(o.LabelId) {
		return nil, false
	}
	return o.LabelId, true
}

// HasLabelId returns a boolean if a field has been set.
func (o *MessageUpdatePayload) HasLabelId() bool {
	if o != nil && !IsNil(o.LabelId) {
		return true
	}

	return false
}

// SetLabelId gets a reference to the given []string and assigns it to the LabelId field.
func (o *MessageUpdatePayload) SetLabelId(v []string) {
	o.LabelId = v
}

// GetIsArchive returns the IsArchive field value if set, zero value otherwise.
func (o *MessageUpdatePayload) GetIsArchive() bool {
	if o == nil || IsNil(o.IsArchive) {
		var ret bool
		return ret
	}
	return *o.IsArchive
}

// GetIsArchiveOk returns a tuple with the IsArchive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageUpdatePayload) GetIsArchiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsArchive) {
		return nil, false
	}
	return o.IsArchive, true
}

// HasIsArchive returns a boolean if a field has been set.
func (o *MessageUpdatePayload) HasIsArchive() bool {
	if o != nil && !IsNil(o.IsArchive) {
		return true
	}

	return false
}

// SetIsArchive gets a reference to the given bool and assigns it to the IsArchive field.
func (o *MessageUpdatePayload) SetIsArchive(v bool) {
	o.IsArchive = &v
}

// GetFlagid returns the Flagid field value if set, zero value otherwise.
func (o *MessageUpdatePayload) GetFlagid() MessageFlag {
	if o == nil || IsNil(o.Flagid) {
		var ret MessageFlag
		return ret
	}
	return *o.Flagid
}

// GetFlagidOk returns a tuple with the Flagid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageUpdatePayload) GetFlagidOk() (*MessageFlag, bool) {
	if o == nil || IsNil(o.Flagid) {
		return nil, false
	}
	return o.Flagid, true
}

// HasFlagid returns a boolean if a field has been set.
func (o *MessageUpdatePayload) HasFlagid() bool {
	if o != nil && !IsNil(o.Flagid) {
		return true
	}

	return false
}

// SetFlagid gets a reference to the given MessageFlag and assigns it to the Flagid field.
func (o *MessageUpdatePayload) SetFlagid(v MessageFlag) {
	o.Flagid = &v
}

// GetDestfolderId returns the DestfolderId field value if set, zero value otherwise.
func (o *MessageUpdatePayload) GetDestfolderId() string {
	if o == nil || IsNil(o.DestfolderId) {
		var ret string
		return ret
	}
	return *o.DestfolderId
}

// GetDestfolderIdOk returns a tuple with the DestfolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageUpdatePayload) GetDestfolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.DestfolderId) {
		return nil, false
	}
	return o.DestfolderId, true
}

// HasDestfolderId returns a boolean if a field has been set.
func (o *MessageUpdatePayload) HasDestfolderId() bool {
	if o != nil && !IsNil(o.DestfolderId) {
		return true
	}

	return false
}

// SetDestfolderId gets a reference to the given string and assigns it to the DestfolderId field.
func (o *MessageUpdatePayload) SetDestfolderId(v string) {
	o.DestfolderId = &v
}

func (o MessageUpdatePayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageUpdatePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mode"] = o.Mode
	toSerialize["messageId"] = o.MessageId
	if !IsNil(o.ThreadId) {
		toSerialize["threadId"] = o.ThreadId
	}
	if !IsNil(o.IsFolderSpecific) {
		toSerialize["isFolderSpecific"] = o.IsFolderSpecific
	}
	if !IsNil(o.FolderId) {
		toSerialize["folderId"] = o.FolderId
	}
	if !IsNil(o.LabelId) {
		toSerialize["labelId"] = o.LabelId
	}
	if !IsNil(o.IsArchive) {
		toSerialize["isArchive"] = o.IsArchive
	}
	if !IsNil(o.Flagid) {
		toSerialize["flagid"] = o.Flagid
	}
	if !IsNil(o.DestfolderId) {
		toSerialize["destfolderId"] = o.DestfolderId
	}
	return toSerialize, nil
}

func (o *MessageUpdatePayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mode",
		"messageId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageUpdatePayload := _MessageUpdatePayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessageUpdatePayload)

	if err != nil {
		return err
	}

	*o = MessageUpdatePayload(varMessageUpdatePayload)

	return err
}

type NullableMessageUpdatePayload struct {
	value *MessageUpdatePayload
	isSet bool
}

func (v NullableMessageUpdatePayload) Get() *MessageUpdatePayload {
	return v.value
}

func (v *NullableMessageUpdatePayload) Set(val *MessageUpdatePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageUpdatePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageUpdatePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageUpdatePayload(val *MessageUpdatePayload) *NullableMessageUpdatePayload {
	return &NullableMessageUpdatePayload{value: val, isSet: true}
}

func (v NullableMessageUpdatePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageUpdatePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


