/*
Zoho Mail API

This is a Zoho Mail API OpenAPI 3.0 specification

API version: 1.0.0
Contact: vigneshwaran4817@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zmail

import (
	"encoding/json"
	"fmt"
)

// FolderUpdateMode the model 'FolderUpdateMode'
type FolderUpdateMode string

// List of FolderUpdateMode
const (
	FOLDERUPDATEMODE_MOVE FolderUpdateMode = "move"
	FOLDERUPDATEMODE_RENAME FolderUpdateMode = "rename"
	FOLDERUPDATEMODE_SET_VIEWABLE_IN_IMAP FolderUpdateMode = "setViewableInIMAP"
	FOLDERUPDATEMODE_REMOVE_VIEWABLE_IN_IMAP FolderUpdateMode = "removeViewableInIMAP"
	FOLDERUPDATEMODE_MARK_AS_READ FolderUpdateMode = "markAsRead"
	FOLDERUPDATEMODE_EMPTY_FOLDER FolderUpdateMode = "emptyFolder"
)

// All allowed values of FolderUpdateMode enum
var AllowedFolderUpdateModeEnumValues = []FolderUpdateMode{
	"move",
	"rename",
	"setViewableInIMAP",
	"removeViewableInIMAP",
	"markAsRead",
	"emptyFolder",
}

func (v *FolderUpdateMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FolderUpdateMode(value)
	for _, existing := range AllowedFolderUpdateModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FolderUpdateMode", value)
}

// NewFolderUpdateModeFromValue returns a pointer to a valid FolderUpdateMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFolderUpdateModeFromValue(v string) (*FolderUpdateMode, error) {
	ev := FolderUpdateMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FolderUpdateMode: valid values are %v", v, AllowedFolderUpdateModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FolderUpdateMode) IsValid() bool {
	for _, existing := range AllowedFolderUpdateModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FolderUpdateMode value
func (v FolderUpdateMode) Ptr() *FolderUpdateMode {
	return &v
}

type NullableFolderUpdateMode struct {
	value *FolderUpdateMode
	isSet bool
}

func (v NullableFolderUpdateMode) Get() *FolderUpdateMode {
	return v.value
}

func (v *NullableFolderUpdateMode) Set(val *FolderUpdateMode) {
	v.value = val
	v.isSet = true
}

func (v NullableFolderUpdateMode) IsSet() bool {
	return v.isSet
}

func (v *NullableFolderUpdateMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolderUpdateMode(val *FolderUpdateMode) *NullableFolderUpdateMode {
	return &NullableFolderUpdateMode{value: val, isSet: true}
}

func (v NullableFolderUpdateMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolderUpdateMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

