openapi: 3.0.3
info:
  contact:
    email: vigneshwaran4817@gmail.com
  description: This is a Zoho Mail API OpenAPI 3.0 specification
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Zoho Mail API
  version: 1.0.0
externalDocs:
  description: Find out more about the Zoho Mail REST API
  url: https://www.zoho.com/mail/help/api/overview.html
servers:
- url: https://mail.zoho.com
- url: https://mail.zoho.in
- url: https://mail.zoho.eu
- url: https://mail.zoho.jp
- url: https://mail.zohocloud.ca
tags:
- description: The User Mail Account APIs help you to get and update information about
    the mail accounts and the related configurations and settings of the users in
    the organization. The following are part of Mail Accounts API
  externalDocs:
    description: Find out more
    url: https://www.zoho.com/mail/help/api/account-api.html
  name: accounts
- description: The Folder APIs help you to get and update information about the Folder
    details of a particular user account.
  externalDocs:
    description: Find out more
    url: https://www.zoho.com/mail/help/api/folders-api.html
  name: folders
- description: The Label APIs help you to get and update information about the label
    details of a particular user account.
  externalDocs:
    description: Find out more
    url: https://www.zoho.com/mail/help/api/labels-api.html
  name: labels
- description: The Message APIs help you to retrieve messages from the user account
    and access them.
  externalDocs:
    description: Find out more
    url: https://www.zoho.com/mail/help/api/email-api.html
  name: email
paths:
  /api/accounts:
    get:
      description: This API is used to retrieve all the accounts details of the authenticated
        user.
      operationId: getmailaccounts
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponse'
          description: Successful operation
        "400":
          description: Invalid input passed
        "404":
          description: Page not found
        "500":
          description: Internal Error
      security:
      - zohomail_auth:
        - ZohoMail.accounts.ALL
        - ZohoMail.accounts.READ
      summary: Get all accounts
      tags:
      - accounts
  /api/accounts/{accountId}:
    get:
      description: Retrieve details of a specific Zoho Mail account.
      operationId: getAccountDetails
      parameters:
      - description: Unique identifier of the account.
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
          description: Successful response with account details.
        "400":
          description: Invalid input passed
        "404":
          description: Page not found
        "500":
          description: Internal Error
      security:
      - zohomail_auth:
        - ZohoMail.accounts.ALL
        - ZohoMail.accounts.READ
      summary: Get Specific Account Details
      tags:
      - accounts
  /api/accounts/{accountId}/folders:
    get:
      description: This API is used to list all the folders within the specified account.
      operationId: getAllFolders
      parameters:
      - description: The ID of the account where the folder will be listed.
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoldersResponse'
          description: Fetched all folders successfully
        "400":
          description: Invalid input passed
        "404":
          description: Page not found
        "500":
          description: Internal Error
      summary: Get all folders of the account
      tags:
      - folders
    post:
      description: Adds a new folder to a specific account.
      operationId: createFolder
      parameters:
      - description: The ID of the account where the folder will be created.
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createFolder_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderResponse'
          description: Folder successfully created.
        "400":
          description: Invalid input passed
        "404":
          description: Page not found
        "500":
          description: Internal Error
      summary: Create a New Folder
      tags:
      - folders
  /api/accounts/{accountId}/folders/{folderId}:
    delete:
      description: "This API is used to delete a specific folder in a specific account,\
        \ using the account ID and the folder ID."
      operationId: deleteFolder
      parameters:
      - description: This key is used to identify the account from which the folders
          have to be fetched. It is generated during account addition.
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      - description: This key is used to identify the folder to be fetched.
        explode: false
        in: path
        name: folderId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoDataResponse'
          description: Deleted folder successfully
        "400":
          description: Invalid input passed
        "404":
          description: Page not found
        "500":
          description: Internal Error
      summary: Delete a folder
      tags:
      - folders
    get:
      description: "This API is used to retrieve a specific folder in a specific account,\
        \ using the account ID and the folder ID."
      operationId: getFolder
      parameters:
      - description: The ID of the account where the folder will be listed.
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      - description: This key is used to identify the folder to be fetched.
        explode: false
        in: path
        name: folderId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderResponse'
          description: Fetched folder successfully
        "400":
          description: Invalid input passed
        "404":
          description: Page not found
        "500":
          description: Internal Error
      summary: Get a specific folder of the account
      tags:
      - folders
    put:
      description: This API serves the purpose of updating folders with various modes.
      operationId: updateFolder
      parameters:
      - description: This key is used to identify the account from which the folders
          have to be fetched. It is generated during account addition.
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      - description: This key is used to identify the folder to be fetched.
        explode: false
        in: path
        name: folderId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FolderUpdatePayload'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoDataResponse'
          description: Updated folder successfully
        "400":
          description: Invalid input passed
        "404":
          description: Page not found
        "500":
          description: Internal Error
      summary: Update a folder
      tags:
      - folders
  /api/accounts/{accountId}/messages/view:
    get:
      description: "The API retrieves a list of all the emails in a specific folder\
        \ or a list of emails based on predefined conditions like status/flags/labels,\
        \ and more."
      operationId: listEmails
      parameters:
      - description: This key is used to identify the account from which the folders
          have to be fetched. It is generated during account addition.
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for the folder from which the emails need
          to be retrieved. This can be fetched using the Get all folders API.
        explode: true
        in: query
        name: folderId
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: The starting sequence number of the emails to be retrieved.
        explode: true
        in: query
        name: start
        required: false
        schema:
          default: 1
          format: int32
          type: integer
        style: form
      - description: The number of emails to be retrieved from the start value mentioned.
          Allowed values:- Min. value:- 1 and max. value:- 200.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          maximum: 200
          minimum: 1
          type: integer
        style: form
      - description: Retrieve emails by read or unread status.
        explode: true
        in: query
        name: status
        required: false
        schema:
          default: all
          enum:
          - read
          - unread
          - all
          type: string
        style: form
      - description: The unique identifier for the flag used to retrieve emails based
          on a specific flag type.
        explode: true
        in: query
        name: flagid
        required: false
        schema:
          description: "Possible values: \n                  0 - flag_not_set\n  \
            \                1 - info\n                  2 - important\n         \
            \         3 - followup"
          format: int32
          type: integer
        style: form
      - description: The unique identifier for the label used to retrieve emails based
          on a specific label.
        explode: true
        in: query
        name: labelid
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: The unique identifier for the flag used to retrieve emails of
          the given threadId.
        explode: true
        in: query
        name: threadId
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: The basis on which the sorting of the list of emails should be
          done.
        explode: true
        in: query
        name: sortBy
        required: false
        schema:
          default: date
          enum:
          - date
          - messageId
          - size
          type: string
        style: form
      - description: The order in which the sorting of the list of emails should be
          done.
        explode: true
        in: query
        name: sortorder
        required: false
        schema:
          default: false
          description: "true for ascending order, false for descending order"
          type: boolean
        style: form
      - description: Whether to details need to be included or not on the list of
          emails retrieved.
        explode: true
        in: query
        name: includeto
        required: false
        schema:
          default: false
          description: "true to include to details, false to not include to details."
          type: boolean
        style: form
      - description: Whether sent emails need to be included or not on the list of
          emails retrieved.
        explode: true
        in: query
        name: includesent
        required: false
        schema:
          default: false
          description: "true to include sent emails, false to not include sent emails."
          type: boolean
        style: form
      - description: Whether archived emails need to be included or not on the list
          of emails retrieved.
        explode: true
        in: query
        name: includearchive
        required: false
        schema:
          default: false
          description: "true to include archived emails, false to not include archived\
            \ emails."
          type: boolean
        style: form
      - description: Retrieve only the emails with attachments.
        explode: true
        in: query
        name: attachedMails
        required: false
        schema:
          default: false
          description: "true to retrieve the emails with attachments, false to retrieve\
            \ all emails."
          type: boolean
        style: form
      - description: Retrieve only the emails with inline images.
        explode: true
        in: query
        name: inlinedMails
        required: false
        schema:
          default: false
          description: "true to retrieve the emails with inline images, false to retrieve\
            \ all emails."
          type: boolean
        style: form
      - description: Retrieve only flagged emails.
        explode: true
        in: query
        name: flaggedMails
        required: false
        schema:
          default: false
          description: "true to retrieve flagged emails, false to retrieve all emails."
          type: boolean
        style: form
      - description: Retrieve only emails with replies.
        explode: true
        in: query
        name: respondedMails
        required: false
        schema:
          default: false
          description: "true to retrieve emails with replies, false to retrieve all\
            \ emails."
          type: boolean
        style: form
      - description: Retrieve emails that are a part of conversations.
        explode: true
        in: query
        name: threadedMails
        required: false
        schema:
          default: false
          description: "true to retrieve threaded emails, false to retrieve all emails."
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailsResponse'
          description: Fetched emails successfully
        "400":
          description: Invalid input passed
        "404":
          description: Page not found
        "500":
          description: Internal Error
      summary: Retrieves emails
      tags:
      - email
  /api/accounts/{accountId}/messages/search:
    get:
      description: "The API retrieves the list of emails, based on the custom search\
        \ terms and parameters."
      operationId: searchEmails
      parameters:
      - description: This key is used to identify the account from which the folders
          have to be fetched. It is generated during account addition.
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      - description: "Specifies the search criteria. Ensure that the searchKey is\
          \ constructed using the search syntax defined in this help page. For example:-\
          \ To search for new emails, provide the searchKey as newMails."
        explode: true
        in: query
        name: searchKey
        required: true
        schema:
          type: string
        style: form
      - description: "Specifies the time before which emails were received. It allows\
          \ users to filter emails based on their received timestamp. Format:- Unix\
          \ timestamp in milliseconds. Example:- 1609459200000. By default, the API\
          \ retrieves emails received before 2 minutes from the current time unless\
          \ a specific timestamp is provided."
        explode: true
        in: query
        name: receivedTime
        required: false
        schema:
          format: int64
          type: integer
        style: form
      - description: Specifies the starting sequence number of the emails to be retrieved.
        explode: true
        in: query
        name: start
        required: false
        schema:
          default: 1
          format: int32
          type: integer
        style: form
      - description: Specifies the number of emails to be retrieved from the start
          value mentioned. Allowed values:- Min. value:- 1 and max. value:- 200.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          maximum: 200
          minimum: 1
          type: integer
        style: form
      - description: Specifies whether To details need to be included or not on the
          list of emails retrieved.
        explode: true
        in: query
        name: includeto
        required: false
        schema:
          default: false
          description: "true to include To details, false to not include To details."
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailsResponse'
          description: Fetched emails successfully
        "400":
          description: Invalid input passed
        "404":
          description: Page not found
        "500":
          description: Internal Error
      summary: Searches emails
      tags:
      - email
  /api/accounts/{accountId}/folders/{folderId}/messages/{messageId}/header:
    get:
      description: "The API retrieves the internet message headers of a particular\
        \ email, based on the message ID passed as the request parameter."
      operationId: getMessageHeader
      parameters:
      - description: This key is used to identify the account from which the folders
          have to be fetched. It is generated during account addition.
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      - description: This key is used to identify the folder to be used.
        explode: false
        in: path
        name: folderId
        required: true
        schema:
          type: string
        style: simple
      - description: This key is used to identify the message to be used.
        explode: false
        in: path
        name: messageId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: raw
        required: false
        schema:
          default: true
          description: This parameter is used to specify the response format of message
            headers.
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getMessageHeader_200_response'
          description: Fetched email header successfully
        "400":
          description: Invalid input passed
        "404":
          description: Page not found
        "500":
          description: Internal Error
      summary: Retrives message headers
      tags:
      - email
  /api/accounts/{accountId}/folders/{folderId}/messages/{messageId}/content:
    get:
      description: "This API is used to retrieve the message contents of an email\
        \ based on the message ID passed in the request URL. In case, you retrieve\
        \ an email from a thread, you can add the includeBlockContent parameter to\
        \ get the reply email and the parent email separately. If block content is\
        \ available but the includeBlockContent parameter is not passed, then the\
        \ original email content can only be retrieved."
      operationId: getMessageContent
      parameters:
      - description: This key is used to identify the account from which the folders
          have to be fetched. It is generated during account addition.
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      - description: This key is used to identify the folder to be used.
        explode: false
        in: path
        name: folderId
        required: true
        schema:
          type: string
        style: simple
      - description: This key is used to identify the message to be used.
        explode: false
        in: path
        name: messageId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: includeBlockContent
        required: false
        schema:
          default: false
          description: This parameter specifies whether to include the block quote
            content in an email along with the email content.
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailContentResponse'
          description: Fetched email content successfully
        "400":
          description: Invalid input passed
        "404":
          description: Page not found
        "500":
          description: Internal Error
      summary: Retrives the content of email
      tags:
      - email
  /api/accounts/{accountId}/messages/{messageId}/originalmessage:
    get:
      description: This API retrieves the MIME representation of an email message.
      operationId: getOriginalMessage
      parameters:
      - description: This key is used to identify the account from which the folders
          have to be fetched. It is generated during account addition.
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      - description: This key is used to identify the message to be used.
        explode: false
        in: path
        name: messageId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailContentResponse'
          description: Fetched email original content successfully
        "400":
          description: Invalid input passed
        "404":
          description: Page not found
        "500":
          description: Internal Error
      summary: Retrives the original content of email
      tags:
      - email
  /api/accounts/{accountId}/folders/{folderId}/messages/{messageId}/details:
    get:
      description: The API retrieves the metadata information of an email based on
        the message ID passed in the request URL.
      operationId: getMessageDetails
      parameters:
      - description: This key is used to identify the account from which the folders
          have to be fetched. It is generated during account addition.
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      - description: This key is used to identify the folder to be used.
        explode: false
        in: path
        name: folderId
        required: true
        schema:
          type: string
        style: simple
      - description: This key is used to identify the message to be used.
        explode: false
        in: path
        name: messageId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailResponse'
          description: Fetched email details successfully
        "400":
          description: Invalid input passed
        "404":
          description: Page not found
        "500":
          description: Internal Error
      summary: Retrives the message details
      tags:
      - email
  /api/accounts/{accountId}/folders/{folderId}/messages/{messageId}/attachmentinfo:
    get:
      description: "The API retrieves the attachment information of a particular email,\
        \ based on the message ID passed in the request URL."
      operationId: getMessageAttachmentInfo
      parameters:
      - description: This key is used to identify the account from which the folders
          have to be fetched. It is generated during account addition.
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      - description: This key is used to identify the folder to be used.
        explode: false
        in: path
        name: folderId
        required: true
        schema:
          type: string
        style: simple
      - description: This key is used to identify the message to be used.
        explode: false
        in: path
        name: messageId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentInfoResponse'
          description: Fetched email attachment details successfully
        "400":
          description: Invalid input passed
        "404":
          description: Page not found
        "500":
          description: Internal Error
      summary: Retrives the message attachment details
      tags:
      - email
  /api/accounts/{accountId}/folders/{folderId}/messages/{messageId}/attachments/{attachmentId}:
    get:
      description: "The API is used to retrieve the content of the attachments in\
        \ an email. In case, there are multiple attachments, the user needs to use\
        \ the api for each attachment with the respective details."
      operationId: getMessageAttachmentContent
      parameters:
      - description: This key is used to identify the account from which the folders
          have to be fetched. It is generated during account addition.
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      - description: This key is used to identify the folder to be used.
        explode: false
        in: path
        name: folderId
        required: true
        schema:
          type: string
        style: simple
      - description: This key is used to identify the message to be used.
        explode: false
        in: path
        name: messageId
        required: true
        schema:
          type: string
        style: simple
      - description: This parameter is the unique ID associated with the particular
          attachment.
        explode: false
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: "The attachment file whose parameter is passed in the Request\
            \ Parameter is extracted and the entire content stream is received as\
            \ a response. The stream can be directly used to write it as a file or\
            \ use it for other purpose, like uploading to any other servers or accounts."
        "400":
          description: Invalid input passed
        "404":
          description: Page not found
        "500":
          description: Internal Error
      summary: Retrives the message attachment content
      tags:
      - email
  /api/accounts/{accountId}/updatemessage:
    put:
      description: Perform different message update actions with the mode field
      operationId: updateMessage
      parameters:
      - description: This key is used to identify the account from which the folders
          have to be fetched. It is generated during account addition.
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageUpdatePayload'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoDataResponse'
          description: Updated message successfully.
        "400":
          description: Invalid input passed
        "404":
          description: Page not found
        "500":
          description: Internal Error
      summary: Update messages
      tags:
      - email
  /api/accounts/{accountId}/folders/{folderId}/messages/{messageId}:
    delete:
      description: This API is used to delete an email.
      operationId: deleteEmail
      parameters:
      - description: This key is used to identify the account from which the folders
          have to be fetched. It is generated during account addition.
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      - description: This key is used to identify the folder to be used.
        explode: false
        in: path
        name: folderId
        required: true
        schema:
          type: string
        style: simple
      - description: This key is used to identify the message to be used.
        explode: false
        in: path
        name: messageId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: expunge
        required: false
        schema:
          default: false
          description: This parameter specifies whether the email should be deleted
            permanently without moving it to the trash folder.
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageDeleteResponse'
          description: Fetched email details successfully
        "400":
          description: Invalid input passed
        "404":
          description: Page not found
        "500":
          description: Internal Error
      summary: Delete a email
      tags:
      - email
  /api/accounts/{accountId}/messages:
    post:
      description: This API is used to send an email.
      operationId: sendEmail
      parameters:
      - description: This key is used to identify the account from which the folders
          have to be fetched. It is generated during account addition.
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoDataResponse'
          description: Sent email successfully
        "400":
          description: Invalid input passed
        "404":
          description: Page not found
        "500":
          description: Internal Error
      summary: Send mail/ Save draft or template
      tags:
      - email
  /api/accounts/{accountId}/messages/attachments:
    post:
      description: This API allows you to upload attachments before using the file
        in an email.
      operationId: uploadAttachments
      parameters:
      - description: This key is used to identify the account from which the folders
          have to be fetched. It is generated during account addition.
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      - description: "To upload multiple attachments, this multipart value is mandatory."
        explode: true
        in: query
        name: uploadType
        required: false
        schema:
          enum:
          - multipart
          type: string
        style: form
      - description: Specifies whether you want to attach an inline image or not.
        explode: true
        in: query
        name: isInline
        required: false
        schema:
          default: false
          type: boolean
        style: form
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/uploadAttachments_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentsResponse'
          description: Uploaded attachment successfully
        "400":
          description: Invalid input passed
        "404":
          description: Page not found
        "500":
          description: Internal Error
      summary: Upload attachment
      tags:
      - email
  /api/accounts/{accountId}/messages/{messageId}:
    post:
      description: This API is used to send a reply to a received email.
      operationId: sendReplyEmail
      parameters:
      - description: This key is used to identify the account from which the folders
          have to be fetched. It is generated during account addition.
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      - description: This key is used to identify the message to be used.
        explode: false
        in: path
        name: messageId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoDataResponse'
          description: Replied email successfully
        "400":
          description: Invalid input passed
        "404":
          description: Page not found
        "500":
          description: Internal Error
      summary: Send reply to email
      tags:
      - email
components:
  schemas:
    NoDataResponse:
      example:
        status:
          code: 200
          description: success
      properties:
        status:
          $ref: '#/components/schemas/Status'
      type: object
    AccountsResponse:
      example:
        data:
        - accountDisplayName: Rebecca
          sendMailDetails:
          - sendMailId: sendMailId
            displayName: displayName
            serverName: serverName
            fromAddress: fromAddress
            serverPort: 0
            userName: userName
            connectionType: connectionType
            status: true
          - sendMailId: sendMailId
            displayName: displayName
            serverName: serverName
            fromAddress: fromAddress
            serverPort: 0
            userName: userName
            connectionType: connectionType
            status: true
          address:
            country: country
            streetAddr: streetAddr
            city: city
            postalCode: postalCode
            state: state
          accountName: bizdemo
          popAccessEnabled: true
          imapAccessEnabled: true
          type: ZOHO_ACCOUNT
          URI: https://mail.zoho.com/api/accounts/2560636000000008002
          mailForward:
          - mailForwardTo: mailForwardTo
            type: type
            status: status
          - mailForwardTo: mailForwardTo
            type: type
            status: status
          accountId: "2560636000000008002"
          incomingUserName: rebecca@zylker.com
          emailAddress:
          - isAlias: true
            isPrimary: true
            mailId: mailId
            isConfirmed: true
          - isAlias: true
            isPrimary: true
            mailId: mailId
            isConfirmed: true
          mailboxStatus: enabled
          vacationResponse:
          - fromDate: 2000-01-23
            accountId: accountId
            subject: subject
            toDate: 2000-01-23
            content: content
            vacationId: vacationId
          - fromDate: 2000-01-23
            accountId: accountId
            subject: subject
            toDate: 2000-01-23
            content: content
            vacationId: vacationId
          smtpStatus: true
        - accountDisplayName: Rebecca
          sendMailDetails:
          - sendMailId: sendMailId
            displayName: displayName
            serverName: serverName
            fromAddress: fromAddress
            serverPort: 0
            userName: userName
            connectionType: connectionType
            status: true
          - sendMailId: sendMailId
            displayName: displayName
            serverName: serverName
            fromAddress: fromAddress
            serverPort: 0
            userName: userName
            connectionType: connectionType
            status: true
          address:
            country: country
            streetAddr: streetAddr
            city: city
            postalCode: postalCode
            state: state
          accountName: bizdemo
          popAccessEnabled: true
          imapAccessEnabled: true
          type: ZOHO_ACCOUNT
          URI: https://mail.zoho.com/api/accounts/2560636000000008002
          mailForward:
          - mailForwardTo: mailForwardTo
            type: type
            status: status
          - mailForwardTo: mailForwardTo
            type: type
            status: status
          accountId: "2560636000000008002"
          incomingUserName: rebecca@zylker.com
          emailAddress:
          - isAlias: true
            isPrimary: true
            mailId: mailId
            isConfirmed: true
          - isAlias: true
            isPrimary: true
            mailId: mailId
            isConfirmed: true
          mailboxStatus: enabled
          vacationResponse:
          - fromDate: 2000-01-23
            accountId: accountId
            subject: subject
            toDate: 2000-01-23
            content: content
            vacationId: vacationId
          - fromDate: 2000-01-23
            accountId: accountId
            subject: subject
            toDate: 2000-01-23
            content: content
            vacationId: vacationId
          smtpStatus: true
        status:
          code: 200
          description: success
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          items:
            $ref: '#/components/schemas/Account'
          type: array
      type: object
    AccountResponse:
      example:
        data:
          accountDisplayName: Rebecca
          sendMailDetails:
          - sendMailId: sendMailId
            displayName: displayName
            serverName: serverName
            fromAddress: fromAddress
            serverPort: 0
            userName: userName
            connectionType: connectionType
            status: true
          - sendMailId: sendMailId
            displayName: displayName
            serverName: serverName
            fromAddress: fromAddress
            serverPort: 0
            userName: userName
            connectionType: connectionType
            status: true
          address:
            country: country
            streetAddr: streetAddr
            city: city
            postalCode: postalCode
            state: state
          accountName: bizdemo
          popAccessEnabled: true
          imapAccessEnabled: true
          type: ZOHO_ACCOUNT
          URI: https://mail.zoho.com/api/accounts/2560636000000008002
          mailForward:
          - mailForwardTo: mailForwardTo
            type: type
            status: status
          - mailForwardTo: mailForwardTo
            type: type
            status: status
          accountId: "2560636000000008002"
          incomingUserName: rebecca@zylker.com
          emailAddress:
          - isAlias: true
            isPrimary: true
            mailId: mailId
            isConfirmed: true
          - isAlias: true
            isPrimary: true
            mailId: mailId
            isConfirmed: true
          mailboxStatus: enabled
          vacationResponse:
          - fromDate: 2000-01-23
            accountId: accountId
            subject: subject
            toDate: 2000-01-23
            content: content
            vacationId: vacationId
          - fromDate: 2000-01-23
            accountId: accountId
            subject: subject
            toDate: 2000-01-23
            content: content
            vacationId: vacationId
          smtpStatus: true
        status:
          code: 200
          description: success
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          $ref: '#/components/schemas/Account'
      type: object
    FolderResponse:
      example:
        data:
          path: /new
          previousFolderId: "2560636000000076001"
          isArchived: 0
          folderName: new
          imapAccess: true
          folderType: Inbox
          URI: https://mail.zoho.com/api/accounts/N****C0CM/folders/2560636000000076007
          folderId: "2560636000000076007"
        status:
          code: 200
          description: success
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          $ref: '#/components/schemas/Folder'
      type: object
    FoldersResponse:
      example:
        data:
        - path: /new
          previousFolderId: "2560636000000076001"
          isArchived: 0
          folderName: new
          imapAccess: true
          folderType: Inbox
          URI: https://mail.zoho.com/api/accounts/N****C0CM/folders/2560636000000076007
          folderId: "2560636000000076007"
        - path: /new
          previousFolderId: "2560636000000076001"
          isArchived: 0
          folderName: new
          imapAccess: true
          folderType: Inbox
          URI: https://mail.zoho.com/api/accounts/N****C0CM/folders/2560636000000076007
          folderId: "2560636000000076007"
        status:
          code: 200
          description: success
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          items:
            $ref: '#/components/schemas/Folder'
          type: array
      type: object
    EmailsResponse:
      example:
        data:
        - summary: summary
          sentDateInGMT: sentDateInGMT
          calendarType: 0
          subject: subject
          messageId: messageId
          threadCount: threadCount
          flagid: flagid
          status2: status2
          priority: priority
          hasInline: hasInline
          toAddress: toAddress
          folderId: folderId
          ccAddress: ccAddress
          threadId: threadId
          hasAttachment: hasAttachment
          size: size
          sender: sender
          receivedTime: receivedTime
          fromAddress: fromAddress
          status: status
        - summary: summary
          sentDateInGMT: sentDateInGMT
          calendarType: 0
          subject: subject
          messageId: messageId
          threadCount: threadCount
          flagid: flagid
          status2: status2
          priority: priority
          hasInline: hasInline
          toAddress: toAddress
          folderId: folderId
          ccAddress: ccAddress
          threadId: threadId
          hasAttachment: hasAttachment
          size: size
          sender: sender
          receivedTime: receivedTime
          fromAddress: fromAddress
          status: status
        status:
          code: 200
          description: success
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          items:
            $ref: '#/components/schemas/Email'
          type: array
      type: object
    EmailHeaderResponse:
      example:
        data:
          headerContent:
            Importance:
            - Importance
            - Importance
            X-Mailer:
            - X-Mailer
            - X-Mailer
            X-Zoho-Virus-Status:
            - X-Zoho-Virus-Status
            - X-Zoho-Virus-Status
            Received:
            - Received
            - Received
            User-Agent:
            - User-Agent
            - User-Agent
            From:
            - From
            - From
            To:
            - To
            - To
            Message-Id:
            - Message-Id
            - Message-Id
            Date:
            - Date
            - Date
            Subject:
            - Subject
            - Subject
            MIME-Version:
            - MIME-Version
            - MIME-Version
            Content-Type:
            - Content-Type
            - Content-Type
          messageId: 0
        status:
          code: 200
          description: success
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          $ref: '#/components/schemas/EmailHeaderDetails'
      type: object
    EmailHeaderRawResponse:
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          $ref: '#/components/schemas/EmailHeaderRawResponse_data'
      type: object
    EmailContentResponse:
      example:
        data:
          messageId: messageId
          content: content
        status:
          code: 200
          description: success
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          $ref: '#/components/schemas/EmailContentResponse_data'
      type: object
    EmailResponse:
      example:
        data:
          summary: summary
          sentDateInGMT: sentDateInGMT
          calendarType: 0
          subject: subject
          messageId: messageId
          threadCount: threadCount
          flagid: flagid
          status2: status2
          priority: priority
          hasInline: hasInline
          toAddress: toAddress
          folderId: folderId
          ccAddress: ccAddress
          threadId: threadId
          hasAttachment: hasAttachment
          size: size
          sender: sender
          receivedTime: receivedTime
          fromAddress: fromAddress
          status: status
        status:
          code: 200
          description: success
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          $ref: '#/components/schemas/Email'
      type: object
    AttachmentInfoResponse:
      example:
        data:
          attachments:
          - attachmentSize: 0
            attachmentName: attachmentName
            attachmentId: attachmentId
          - attachmentSize: 0
            attachmentName: attachmentName
            attachmentId: attachmentId
          messageId: messageId
        status:
          code: 200
          description: success
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          $ref: '#/components/schemas/AttachmentInfoResponse_data'
      type: object
    MessageDeleteResponse:
      example:
        data:
          cId: cId
        status:
          code: 200
          description: success
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          $ref: '#/components/schemas/MessageDeleteResponse_data'
      type: object
    AttachmentsResponse:
      example:
        data:
        - storeName: storeName
          attachmentName: attachmentName
          attachmentPath: attachmentPath
          url: url
        - storeName: storeName
          attachmentName: attachmentName
          attachmentPath: attachmentPath
          url: url
        status:
          code: 200
          description: success
      properties:
        status:
          $ref: '#/components/schemas/Status'
        data:
          items:
            $ref: '#/components/schemas/Attachment'
          type: array
      type: object
    Status:
      example:
        code: 200
        description: success
      properties:
        code:
          example: 200
          type: integer
        description:
          example: success
          type: string
      type: object
    Account:
      example:
        accountDisplayName: Rebecca
        sendMailDetails:
        - sendMailId: sendMailId
          displayName: displayName
          serverName: serverName
          fromAddress: fromAddress
          serverPort: 0
          userName: userName
          connectionType: connectionType
          status: true
        - sendMailId: sendMailId
          displayName: displayName
          serverName: serverName
          fromAddress: fromAddress
          serverPort: 0
          userName: userName
          connectionType: connectionType
          status: true
        address:
          country: country
          streetAddr: streetAddr
          city: city
          postalCode: postalCode
          state: state
        accountName: bizdemo
        popAccessEnabled: true
        imapAccessEnabled: true
        type: ZOHO_ACCOUNT
        URI: https://mail.zoho.com/api/accounts/2560636000000008002
        mailForward:
        - mailForwardTo: mailForwardTo
          type: type
          status: status
        - mailForwardTo: mailForwardTo
          type: type
          status: status
        accountId: "2560636000000008002"
        incomingUserName: rebecca@zylker.com
        emailAddress:
        - isAlias: true
          isPrimary: true
          mailId: mailId
          isConfirmed: true
        - isAlias: true
          isPrimary: true
          mailId: mailId
          isConfirmed: true
        mailboxStatus: enabled
        vacationResponse:
        - fromDate: 2000-01-23
          accountId: accountId
          subject: subject
          toDate: 2000-01-23
          content: content
          vacationId: vacationId
        - fromDate: 2000-01-23
          accountId: accountId
          subject: subject
          toDate: 2000-01-23
          content: content
          vacationId: vacationId
        smtpStatus: true
      properties:
        accountId:
          example: "2560636000000008002"
          type: string
        accountDisplayName:
          example: Rebecca
          type: string
        incomingUserName:
          example: rebecca@zylker.com
          type: string
        accountName:
          example: bizdemo
          type: string
        type:
          example: ZOHO_ACCOUNT
          type: string
        mailboxStatus:
          example: enabled
          type: string
        imapAccessEnabled:
          type: boolean
        popAccessEnabled:
          type: boolean
        smtpStatus:
          type: boolean
        mailForward:
          items:
            $ref: '#/components/schemas/MailForward'
          type: array
        emailAddress:
          items:
            $ref: '#/components/schemas/EmailAddress'
          type: array
        vacationResponse:
          items:
            $ref: '#/components/schemas/VacationResponse'
          type: array
        sendMailDetails:
          items:
            $ref: '#/components/schemas/SendMailDetails'
          type: array
        address:
          $ref: '#/components/schemas/Address'
        URI:
          example: https://mail.zoho.com/api/accounts/2560636000000008002
          format: uri
          type: string
      type: object
    MailForward:
      example:
        mailForwardTo: mailForwardTo
        type: type
        status: status
      properties:
        mailForwardTo:
          type: string
        type:
          type: string
        status:
          type: string
      type: object
    EmailAddress:
      example:
        isAlias: true
        isPrimary: true
        mailId: mailId
        isConfirmed: true
      properties:
        isAlias:
          type: boolean
        isPrimary:
          type: boolean
        mailId:
          type: string
        isConfirmed:
          type: boolean
      type: object
    VacationResponse:
      example:
        fromDate: 2000-01-23
        accountId: accountId
        subject: subject
        toDate: 2000-01-23
        content: content
        vacationId: vacationId
      properties:
        subject:
          type: string
        fromDate:
          format: date
          type: string
        toDate:
          format: date
          type: string
        content:
          type: string
        accountId:
          type: string
        vacationId:
          type: string
      type: object
    SendMailDetails:
      example:
        sendMailId: sendMailId
        displayName: displayName
        serverName: serverName
        fromAddress: fromAddress
        serverPort: 0
        userName: userName
        connectionType: connectionType
        status: true
      properties:
        sendMailId:
          type: string
        displayName:
          type: string
        serverName:
          type: string
        serverPort:
          type: integer
        userName:
          type: string
        connectionType:
          type: string
        fromAddress:
          type: string
        status:
          type: boolean
      type: object
    Address:
      example:
        country: country
        streetAddr: streetAddr
        city: city
        postalCode: postalCode
        state: state
      properties:
        country:
          type: string
        streetAddr:
          type: string
        city:
          type: string
        postalCode:
          type: string
        state:
          type: string
      type: object
    Folder:
      example:
        path: /new
        previousFolderId: "2560636000000076001"
        isArchived: 0
        folderName: new
        imapAccess: true
        folderType: Inbox
        URI: https://mail.zoho.com/api/accounts/N****C0CM/folders/2560636000000076007
        folderId: "2560636000000076007"
      properties:
        path:
          example: /new
          type: string
        previousFolderId:
          example: "2560636000000076001"
          type: string
        isArchived:
          example: 0
          type: integer
        folderName:
          example: new
          type: string
        imapAccess:
          example: true
          type: boolean
        folderType:
          example: Inbox
          type: string
        URI:
          example: https://mail.zoho.com/api/accounts/N****C0CM/folders/2560636000000076007
          type: string
        folderId:
          example: "2560636000000076007"
          type: string
      type: object
    FolderUpdateMode:
      enum:
      - move
      - rename
      - setViewableInIMAP
      - removeViewableInIMAP
      - markAsRead
      - emptyFolder
      type: string
    FolderUpdatePayload:
      example:
        mode: move
        previousFolderId: "2560636000000076001"
        parentFolderId: "2560636000000076001"
        folderName: folderName
      properties:
        mode:
          $ref: '#/components/schemas/FolderUpdateMode'
        parentFolderId:
          description: This parameter refers to the folder ID of the destination parent
            folder where the folder should be moved.
          example: "2560636000000076001"
          type: string
        previousFolderId:
          description: This parameter refers to the folder ID of a specific folder
            under the destination parent folder. This determines the exact position
            where the folder should be placed.
          example: "2560636000000076001"
          type: string
        folderName:
          description: This parameter refers to the new name of the folder.
          type: string
      required:
      - mode
      type: object
    Email:
      example:
        summary: summary
        sentDateInGMT: sentDateInGMT
        calendarType: 0
        subject: subject
        messageId: messageId
        threadCount: threadCount
        flagid: flagid
        status2: status2
        priority: priority
        hasInline: hasInline
        toAddress: toAddress
        folderId: folderId
        ccAddress: ccAddress
        threadId: threadId
        hasAttachment: hasAttachment
        size: size
        sender: sender
        receivedTime: receivedTime
        fromAddress: fromAddress
        status: status
      properties:
        summary:
          description: A brief summary of the email.
          type: string
        sentDateInGMT:
          description: "The sent date of the email in GMT, represented as a Unix timestamp\
            \ in milliseconds."
          type: string
        calendarType:
          description: The type of calendar associated with the email.
          type: integer
        subject:
          description: The subject of the email.
          type: string
        messageId:
          description: The unique identifier of the email message.
          type: string
        threadCount:
          description: The number of emails in the thread.
          type: string
        flagid:
          description: "The flag identifier associated with the email (e.g., flag_not_set)."
          type: string
        status2:
          description: An alternative status code for the email.
          type: string
        priority:
          description: The priority of the email.
          type: string
        hasInline:
          description: "Indicates whether the email has inline content (true/false,\
            \ represented as string)."
          type: string
        toAddress:
          description: "The recipient's email address, including display name."
          type: string
        folderId:
          description: The unique identifier of the folder containing the email.
          type: string
        ccAddress:
          description: "The CC recipient's email address, or \"Not Provided\"."
          type: string
        threadId:
          description: The unique identifier of the email thread.
          type: string
        hasAttachment:
          description: "Indicates whether the email has attachments (0 or 1, represented\
            \ as string)."
          type: string
        size:
          description: The size of the email.
          type: string
        sender:
          description: The sender's display name.
          type: string
        receivedTime:
          description: "The received time of the email, represented as a Unix timestamp\
            \ in milliseconds."
          type: string
        fromAddress:
          description: The sender's email address.
          type: string
        status:
          description: "The status of the email (e.g., 1 for read, 0 for unread)."
          type: string
      type: object
    EmailHeaderDetails:
      example:
        headerContent:
          Importance:
          - Importance
          - Importance
          X-Mailer:
          - X-Mailer
          - X-Mailer
          X-Zoho-Virus-Status:
          - X-Zoho-Virus-Status
          - X-Zoho-Virus-Status
          Received:
          - Received
          - Received
          User-Agent:
          - User-Agent
          - User-Agent
          From:
          - From
          - From
          To:
          - To
          - To
          Message-Id:
          - Message-Id
          - Message-Id
          Date:
          - Date
          - Date
          Subject:
          - Subject
          - Subject
          MIME-Version:
          - MIME-Version
          - MIME-Version
          Content-Type:
          - Content-Type
          - Content-Type
        messageId: 0
      properties:
        headerContent:
          $ref: '#/components/schemas/EmailHeaderDetails_headerContent'
        messageId:
          format: int64
          type: integer
      type: object
    EmailAttachment:
      example:
        attachmentSize: 0
        attachmentName: attachmentName
        attachmentId: attachmentId
      properties:
        attachmentSize:
          description: Size of the attachment in bytes.
          type: integer
        attachmentName:
          description: Name of the attachment file.
          type: string
        attachmentId:
          description: Unique identifier for the attachment.
          type: string
      type: object
    MessageUpdateMode:
      enum:
      - markAsRead
      - markAsUnread
      - moveMessage
      - setFlag
      - applyLabel
      - removeLabel
      - removeAllLabels
      - archiveMails
      - unArchiveMails
      - moveToSpam
      - markNotSpam
      type: string
    MessageFlag:
      enum:
      - info
      - important
      - followup
      - flag_not_set
      type: string
    MessageUpdatePayload:
      example:
        mode: markAsRead
        threadId:
        - threadId
        - threadId
        isArchive: false
        labelId:
        - labelId
        - labelId
        isFolderSpecific: false
        messageId:
        - messageId
        - messageId
        flagid: info
        destfolderId: destfolderId
        folderId: folderId
      properties:
        mode:
          $ref: '#/components/schemas/MessageUpdateMode'
        messageId:
          items:
            type: string
          type: array
        threadId:
          items:
            type: string
          type: array
        isFolderSpecific:
          default: false
          type: boolean
        folderId:
          type: string
        labelId:
          items:
            type: string
          type: array
        isArchive:
          default: false
          type: boolean
        flagid:
          $ref: '#/components/schemas/MessageFlag'
        destfolderId:
          type: string
      required:
      - messageId
      - mode
      type: object
    SendEmailMode:
      enum:
      - draft
      - template
      type: string
    SendEmailRequest:
      example:
        scheduleTime: scheduleTime
        attachments:
        - attachmentName: attachmentName
          storeName: storeName
          attachmentPath: attachmentPath
        - attachmentName: attachmentName
          storeName: storeName
          attachmentPath: attachmentPath
        subject: subject
        timeZone: timeZone
        bccAddress: bccAddress
        encoding: UTF-8
        toAddress: toAddress
        content: content
        ccAddress: ccAddress
        mode: draft
        scheduleType: 0
        askReceipt: "true"
        action: reply
        fromAddress: fromAddress
        mailFormat: html
        isSchedule: true
      properties:
        fromAddress:
          description: Provide the sender's email address (associated to the authenticated
            account). Allowed values:- Valid email address corresponding to the authenticated
            account for the From field.
          type: string
        toAddress:
          description: Provide the recipient's email address. Allowed values:- Valid
            recipient email address for the To field.
          type: string
        ccAddress:
          description: Provide the recipient's email address for the Cc field. Allowed
            values:- Valid recipient email address for the Cc field.
          type: string
        bccAddress:
          description: Provide the recipient's email address for the Bcc field. Allowed
            values:- Valid recipient email address for the Bcc field.
          type: string
        subject:
          description: Provide the subject of the email.
          type: string
        content:
          description: Provide the content of the email.
          type: string
        mailFormat:
          default: html
          description: Specify the format in which the mail needs to be sent. The
            value can be html or plaintext. The default value is html.
          enum:
          - html
          - plaintext
          type: string
        askReceipt:
          description: Specifies whether Read receipt from the recipient is requested
            or not. Allowed values:- yes - Requesting a read receipt. no - Not requesting
            a read receipt
          enum:
          - "true"
          - "false"
          type: string
        encoding:
          default: UTF-8
          description: "Specifies the encoding that is to be used in the email content.\
            \ Allowed values:- Big5, EUC-JP, EUC-KR, GB2312, ISO-2022-JP, ISO-8859-1,\
            \ KOI8-R, Shift_JIS, US-ASCII, UTF-8, WINDOWS-1251, X-WINDOWS-ISO2022JP.\
            \ The default value is UTF-8."
          enum:
          - Big5
          - EUC-JP
          - EUC-KR
          - GB2312
          - ISO-2022-JP
          - ISO-8859-1
          - KOI8-R
          - Shift_JIS
          - US-ASCII
          - UTF-8
          - WINDOWS-1251
          - X-WINDOWS-ISO2022JP
          type: string
        isSchedule:
          description: "Depending on whether the mail has to be scheduled or not,\
            \ the value can be true - if the email should be scheduled. false - if\
            \ the email should be sent immediately."
          type: boolean
        scheduleType:
          description: Specifies the type of scheduling. Allowed values:- 1 - Schedules
            email to be sent after one hour from the time of the request. 2 - Schedules
            email to be sent after two hours from the time of the request. 3 - Schedules
            email to be sent after four hours from the time of the request. 4 - Schedules
            email to be sent by the morning of the next day from the time of the request.
            5 - Schedules email to be sent by the afternoon of the next day from the
            time of the request. 6 - Schedules email to be sent on the custom date
            and time of your choice.
          enum:
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          type: integer
        timeZone:
          description: Specify the timezone to schedule your email. This parameter
            is mandatory if scheduleType is set to value 6. For example:- GMT 5.30
            (India Standard Time - Asia/Calcutta).
          type: string
        scheduleTime:
          description: Specify the date and time you want to schedule your email.
            This parameter is mandatory if scheduleType is set to value 6. Format:-
            MM/DD/YYYY HH:MM:SS. For example:- 09/15/2023 14:30:28
          type: string
        attachments:
          items:
            $ref: '#/components/schemas/SendEmailRequest_attachments_inner'
          type: array
        mode:
          $ref: '#/components/schemas/SendEmailMode'
        action:
          enum:
          - reply
          type: string
      required:
      - fromAddress
      - toAddress
      type: object
    Attachment:
      example:
        storeName: storeName
        attachmentName: attachmentName
        attachmentPath: attachmentPath
        url: url
      properties:
        storeName:
          description: store name.
          type: string
        attachmentName:
          description: Name of the attachment file.
          type: string
        attachmentPath:
          description: Attachment Path
          type: string
        url:
          type: string
      type: object
    createFolder_request:
      properties:
        folderName:
          description: The name of the folder to be created.
          example: newFolder
          type: string
        parentFolderId:
          description: The ID of the parent folder under which the new folder is created.
          example: "2560636000000076001"
          type: string
        parentFolderPath:
          description: The path of the parent folder under which the new folder is
            created.
          example: /Inbox
          type: string
      required:
      - folderName
      type: object
    getMessageHeader_200_response:
      anyOf:
      - $ref: '#/components/schemas/EmailHeaderResponse'
      - $ref: '#/components/schemas/EmailHeaderRawResponse'
    uploadAttachments_request:
      properties:
        file:
          description: The binary data of the attachment file.
          format: binary
          type: string
        attach:
          description: The binary data of the attachment file.
          format: binary
          type: string
        fileName:
          description: The name of the attachment file.
          type: string
        isInline:
          description: Whether the attachment is inline.
          type: boolean
      type: object
    EmailHeaderRawResponse_data:
      properties:
        headerContent:
          type: string
        messageId:
          type: string
      type: object
    EmailContentResponse_data:
      example:
        messageId: messageId
        content: content
      properties:
        messageId:
          type: string
        content:
          type: string
      type: object
    AttachmentInfoResponse_data:
      example:
        attachments:
        - attachmentSize: 0
          attachmentName: attachmentName
          attachmentId: attachmentId
        - attachmentSize: 0
          attachmentName: attachmentName
          attachmentId: attachmentId
        messageId: messageId
      properties:
        attachments:
          items:
            $ref: '#/components/schemas/EmailAttachment'
          type: array
        messageId:
          type: string
      type: object
    MessageDeleteResponse_data:
      example:
        cId: cId
      properties:
        cId:
          type: string
      type: object
    EmailHeaderDetails_headerContent:
      example:
        Importance:
        - Importance
        - Importance
        X-Mailer:
        - X-Mailer
        - X-Mailer
        X-Zoho-Virus-Status:
        - X-Zoho-Virus-Status
        - X-Zoho-Virus-Status
        Received:
        - Received
        - Received
        User-Agent:
        - User-Agent
        - User-Agent
        From:
        - From
        - From
        To:
        - To
        - To
        Message-Id:
        - Message-Id
        - Message-Id
        Date:
        - Date
        - Date
        Subject:
        - Subject
        - Subject
        MIME-Version:
        - MIME-Version
        - MIME-Version
        Content-Type:
        - Content-Type
        - Content-Type
      properties:
        Importance:
          items:
            type: string
          type: array
        X-Mailer:
          items:
            type: string
          type: array
        X-Zoho-Virus-Status:
          items:
            type: string
          type: array
        Received:
          items:
            type: string
          type: array
        User-Agent:
          items:
            type: string
          type: array
        From:
          items:
            type: string
          type: array
        To:
          items:
            type: string
          type: array
        Message-Id:
          items:
            type: string
          type: array
        Date:
          items:
            type: string
          type: array
        Subject:
          items:
            type: string
          type: array
        MIME-Version:
          items:
            type: string
          type: array
        Content-Type:
          items:
            type: string
          type: array
      type: object
    SendEmailRequest_attachments_inner:
      example:
        attachmentName: attachmentName
        storeName: storeName
        attachmentPath: attachmentPath
      properties:
        attachmentName:
          description: Specifies the name of the attachment. This parameter can be
            fetched from Upload Attachments API.
          type: string
        attachmentPath:
          description: Specifies the path in which the attachment is stored. This
            parameter can be fetched from Upload Attachments API.
          type: string
        storeName:
          description: Specifies the name of the store where the attachment is saved.
            This parameter can be fetched from Upload Attachments API.
          type: string
      type: object
  securitySchemes:
    zohomail_auth:
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.zoho.com/oauth/v2/auth
          scopes:
            ZohoMail.accounts.ALL: Full access to accounts.
            ZohoMail.accounts.READ: READ access to accounts.
            ZohoMail.folders.ALL: Full access to folders.
            ZohoMail.folders.CREATE: Create a folder.
            ZohoMail.messages.CREATE: Send email
            ZohoMail.messages.ALL: Full access to messages
            ZohoMail.messages.READ: Read access to messages
          tokenUrl: https://accounts.zoho.com/oauth/v2/token
      type: oauth2
