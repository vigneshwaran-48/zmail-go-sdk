/*
Zoho Mail API

This is a Zoho Mail API OpenAPI 3.0 specification

API version: 1.0.0
Contact: vigneshwaran4817@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package zmail

import (
	"encoding/json"
)

// checks if the EmailContentResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailContentResponseData{}

// EmailContentResponseData struct for EmailContentResponseData
type EmailContentResponseData struct {
	MessageId *string `json:"messageId,omitempty"`
	Content *string `json:"content,omitempty"`
}

// NewEmailContentResponseData instantiates a new EmailContentResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailContentResponseData() *EmailContentResponseData {
	this := EmailContentResponseData{}
	return &this
}

// NewEmailContentResponseDataWithDefaults instantiates a new EmailContentResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailContentResponseDataWithDefaults() *EmailContentResponseData {
	this := EmailContentResponseData{}
	return &this
}

// GetMessageId returns the MessageId field value if set, zero value otherwise.
func (o *EmailContentResponseData) GetMessageId() string {
	if o == nil || IsNil(o.MessageId) {
		var ret string
		return ret
	}
	return *o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContentResponseData) GetMessageIdOk() (*string, bool) {
	if o == nil || IsNil(o.MessageId) {
		return nil, false
	}
	return o.MessageId, true
}

// HasMessageId returns a boolean if a field has been set.
func (o *EmailContentResponseData) HasMessageId() bool {
	if o != nil && !IsNil(o.MessageId) {
		return true
	}

	return false
}

// SetMessageId gets a reference to the given string and assigns it to the MessageId field.
func (o *EmailContentResponseData) SetMessageId(v string) {
	o.MessageId = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *EmailContentResponseData) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailContentResponseData) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *EmailContentResponseData) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *EmailContentResponseData) SetContent(v string) {
	o.Content = &v
}

func (o EmailContentResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailContentResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MessageId) {
		toSerialize["messageId"] = o.MessageId
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	return toSerialize, nil
}

type NullableEmailContentResponseData struct {
	value *EmailContentResponseData
	isSet bool
}

func (v NullableEmailContentResponseData) Get() *EmailContentResponseData {
	return v.value
}

func (v *NullableEmailContentResponseData) Set(val *EmailContentResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailContentResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailContentResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailContentResponseData(val *EmailContentResponseData) *NullableEmailContentResponseData {
	return &NullableEmailContentResponseData{value: val, isSet: true}
}

func (v NullableEmailContentResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailContentResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


